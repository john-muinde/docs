{
  "openapi": "3.0.0",
  "paths": {
    "/api/v3/rate/{from}/{to}": {
      "get": {
        "description": "An integrator can use this endpoint to get the exchange rate between two currencies",
        "operationId": "RateController_getRates_api/v3",
        "parameters": [
          {
            "name": "from",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "to",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Available exchange rate."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/RateResponseDto"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid API Key"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get exchange rate",
        "tags": ["RATES"]
      }
    },
    "/api/v3/rate/onramp": {
      "post": {
        "description": "An integrator can use this endpoint to get the exchange rate between two currencies",
        "operationId": "RateController_getOnrampRates_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OnrampRateRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Available exchange rate."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/OnchainRateResponseDto"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid API Key"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get Onramp Exchange rate",
        "tags": ["RATES"]
      }
    },
    "/api/v3/rate/offramp": {
      "post": {
        "description": "An integrator can use this endpoint to get the exchange rate between two currencies",
        "operationId": "RateController_getOffRampRates_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OfframpRateRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Available exchange rate."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/OnchainRateResponseDto"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid API Key"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get Offramp Exchange rate",
        "tags": ["RATES"]
      }
    },
    "/api/v3/rate/fiat": {
      "post": {
        "description": "An integrator can use this endpoint to get the exchange rate between two fiat currencies",
        "operationId": "RateController_getFiatToFiatRate_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/FiatRateRequestDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Available exchange rate."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/FiatToFiatRateResponseDto"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid API Key"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get Fiat to Fiat exchange rate",
        "tags": ["RATES"]
      }
    },
    "/api/v3/rate": {
      "get": {
        "description": "An integrator can use this endpoint to get all the exchange rates available",
        "operationId": "RateController_rates_api/v3",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Available exchange rate."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RateResponseDto"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid API Key"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get all exchange rates",
        "tags": ["RATES"]
      }
    },
    "/api/v3/public/rate/{from}/{to}": {
      "get": {
        "description": "Public endpoint for getting exchange rates between two currencies. Used for payment link checkout currency conversion display.",
        "operationId": "PublicRateController_getPublicRate_api/v3",
        "parameters": [
          {
            "name": "from",
            "required": true,
            "in": "path",
            "description": "Source currency code (e.g., USD, KES)",
            "schema": { "type": "string" }
          },
          {
            "name": "to",
            "required": true,
            "in": "path",
            "description": "Target currency code (e.g., KES, USD)",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Available exchange rate."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/RateResponseDto"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Exchange rate not found"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "summary": "Get public exchange rate (no auth required)",
        "tags": ["PUBLIC RATES"]
      }
    },
    "/api/v3/public/rate": {
      "get": {
        "description": "Public endpoint for getting all available exchange rates. Useful for dropdown displays or rate comparison.",
        "operationId": "PublicRateController_getPublicRates_api/v3",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Available exchange rates."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RateResponseDto"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all public exchange rates (no auth required)",
        "tags": ["PUBLIC RATES"]
      }
    },
    "/api/v3/wallet/fiat": {
      "post": {
        "description": "This endpoint will create a fiat wallet for the integrator.",
        "operationId": "FiatWalletController_createFiatWallet_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateFiatWalletDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Fiat wallet has been successfully created."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/FiatWalletResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Create a Fiat Wallet",
        "tags": ["FIAT WALLET"]
      },
      "get": {
        "description": "This endpoint will return all the fiat wallets created by the integrator.",
        "operationId": "FiatWalletController_getUsersFiatWallet_api/v3",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Fiat wallet has been successfully retrieved."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FiatWalletResponseDto"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get Integrator Fiat Wallets",
        "tags": ["FIAT WALLET"]
      }
    },
    "/api/v3/wallet/fiat/{id}": {
      "get": {
        "description": "This endpoint will return the fiat wallet created by the integrator.",
        "operationId": "FiatWalletController_getFiatWallet_api/v3",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "The wallet has been successfully retrieved."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/FiatWalletResponseDto"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Wallet Not Found"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get Integrator Fiat Wallet by Wallet ID",
        "tags": ["FIAT WALLET"]
      },
      "patch": {
        "description": "This endpoint will update the fiat wallet created by the integrator.",
        "operationId": "FiatWalletController_updateFiatWallet_api/v3",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/updateFiatWalletDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Fiat wallet has been successfully updated."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/FiatWalletResponseDto"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Wallet Not Found"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Update Integrator Fiat Wallet by Wallet ID",
        "tags": ["FIAT WALLET"]
      }
    },
    "/api/v3/wallet/fiat/currency/{currency}": {
      "get": {
        "description": "This endpoint will return the fiat wallet created by the integrator. Optionally filter by country using the \"country\" query parameter.",
        "operationId": "FiatWalletController_getFiatWalletByCurrency_api/v3",
        "parameters": [
          {
            "name": "country",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "currency",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "The wallet has been successfully retrieved."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/FiatWalletResponseDto"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Wallet Not Found"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get Integrator Fiat Wallet by Currency (optionally by Country)",
        "tags": ["FIAT WALLET"]
      }
    },
    "/api/v3/wallet/transfer/deposit-balance": {
      "post": {
        "description": "This endpoint will transfer the deposit balance of the fiat wallet to the main balance.",
        "operationId": "FiatWalletController_transferDepositBalance_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferDepositBalanceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Transfer deposit balance has been successfully done."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/FiatWalletResponseDto"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Wallet Not Found"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Transfer Deposit Balance",
        "tags": ["FIAT WALLET"]
      }
    },
    "/api/v3/wallet/crypto": {
      "post": {
        "description": "The crypto wallet will contain the specified chain and coins an integrator desires to hold and one can create as many wallets as needed.",
        "operationId": "CryptoWalletController_createCryptoWallet_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateCryptoWalletDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Wallet has been successfully created."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/CryptoWalletResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Create a Crypto wallet",
        "tags": ["CRYPTO WALLET"]
      },
      "get": {
        "description": "This endpoint will return all the crypto wallets created by the integrator.",
        "operationId": "CryptoWalletController_getUsersCryptoWallets_api/v3",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Crypto wallet has been successfully retrieved."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GetCryptoWalletResponseDto"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get Integrator Crypto Wallets",
        "tags": ["CRYPTO WALLET"]
      }
    },
    "/api/v3/wallet/crypto/{id}": {
      "get": {
        "description": "This endpoint will return the crypto wallet created by the integrator by passing the wallet id.",
        "operationId": "CryptoWalletController_getFiatWallet_api/v3",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Crypto Wallet has been successfully retrieved."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/GetCryptoWalletResponseDto"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get Integrator Crypto Wallet by Wallet ID",
        "tags": ["CRYPTO WALLET"]
      }
    },
    "/api/v3/integrator": {
      "post": {
        "description": "This endpoint will help you create an integrator",
        "operationId": "IntegratorController_createIntegrator_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateIntegratorDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "The record has been successfully created."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/IntegratorResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "summary": "Create an integrator",
        "tags": ["INTEGRATOR"]
      },
      "get": {
        "description": "This endpoint is used to retrieve an integrator details",
        "operationId": "IntegratorController_getIntegrator_api/v3",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "The record has been successfully retrieved."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/IntegratorResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Not Found" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get an Integrator Details.",
        "tags": ["INTEGRATOR"]
      }
    },
    "/api/v3/integrator/webhook": {
      "patch": {
        "description": "Allows an integrator to update their default webhook URL, secret, and event subscriptions.",
        "operationId": "IntegratorController_updateWebhookSettings_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIntegratorWebhookDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Integrator webhook settings updated successfully."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/IntegratorResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Not Found" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Update webhook configuration",
        "tags": ["INTEGRATOR"]
      }
    },
    "/api/v3/auth/login": {
      "post": {
        "description": "Login to your integrator account. This endpoint allows you to login to your account",
        "operationId": "AuthController_authLogin_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "example": "example@gmail.com" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "login magic link sent to your email"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": { "description": "" },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "summary": "Authentication Login",
        "tags": ["AUTHENTICATION"]
      }
    },
    "/api/v3/auth/api-key/secure": {
      "get": {
        "description": "This endpoint is used to generate an the API Key which can be used to authorize transactions and more",
        "operationId": "AuthController_generateApiKeySecret_api/v3",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Api-key generated successfully"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ApiKeyResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid Api Key"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Generate API Key.",
        "tags": ["AUTHENTICATION"]
      }
    },
    "/api/v3/auth/human-verify": {
      "post": {
        "description": "Complete human verification for magic link requests that were flagged as potentially suspicious",
        "operationId": "AuthController_humanVerify_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/HumanVerifyDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Human verification successful"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/VerifyResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid verification token"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "summary": "Human verification for suspicious requests",
        "tags": ["AUTHENTICATION"]
      }
    },
    "/api/v3/auth/refresh-token": {
      "get": {
        "description": "This endpoint is used to refresh the access token using a valid refresh token",
        "operationId": "AuthController_refreshToken_api/v3",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": { "type": "string", "example": "ok" },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/RefreshTokenResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid Refresh Token Passed"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Refresh access token.",
        "tags": ["AUTHENTICATION"]
      }
    },
    "/api/v3/deposit/mobile-money": {
      "post": {
        "description": "An integrator’s customers can initiate a deposit from their respective mobile money wallets.     An STK push will be sent to the customer and the respective amount will be deducted from their mobile money wallets and deposited into the integrator’s fiat wallet",
        "operationId": "DepositMobileMoneyController_mobileMoney_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateDepositDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Deposit has been successfully created."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/DepositResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Deposit via mobile money",
        "tags": ["MOBILE MONEY DEPOSIT"]
      }
    },
    "/api/v3/deposit/mobile-money/status/{reference_id}": {
      "get": {
        "description": "An integrator can use this endpoint to check the status of a deposit",
        "operationId": "DepositMobileMoneyController_getWithdrawalStatus_api/v3",
        "parameters": [
          {
            "name": "reference_id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Deposit status retrieved."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/DepositStatusResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Not Found" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get Deposit on Mobile Money status",
        "tags": ["MOBILE MONEY DEPOSIT"]
      }
    },
    "/api/v3/deposit/bank/checkout": {
      "post": {
        "description": "Customer Completed transaction using Checkout Url",
        "operationId": "DepositBankCheckoutController_mobileMoney_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankDepositCheckoutDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Checkout Created successfully created."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/BankDepositCheckoutDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Deposit via bank checkout",
        "tags": ["BANK DEPOSIT(checkout)"]
      }
    },
    "/api/v3/deposit/bank/checkout/status/{reference_id}": {
      "get": {
        "description": "An integrator can use this endpoint to check the status of a deposit",
        "operationId": "DepositBankCheckoutController_getWithdrawalStatus_api/v3",
        "parameters": [
          {
            "name": "reference_id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Deposit status retrieved."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/DepositCheckoutResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Not Found" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get Deposit status",
        "tags": ["BANK DEPOSIT(checkout)"]
      }
    },
    "/api/v3/deposit/card": {
      "post": {
        "description": "Customer Completed transaction using Checkout Url",
        "operationId": "DepositCardController_mobileMoney_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CardDepositDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Checkout Created successfully created."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/DepositResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Deposit via card",
        "tags": ["CARD DEPOSIT"]
      }
    },
    "/api/v3/deposit/card/{reference_id}": {
      "get": {
        "description": "An integrator can use this endpoint to check the status of a deposit",
        "operationId": "DepositCardController_getWithdrawalStatus_api/v3",
        "parameters": [
          {
            "name": "reference_id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Deposit status retrieved."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/DepositCheckoutStatusResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Not Found" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get Deposit status",
        "tags": ["CARD DEPOSIT"]
      }
    },
    "/api/v3/customer/mobile-money": {
      "post": {
        "description": "An integrator can use this endpoint to create the customers who will be either receiving or sending money using mobile money.",
        "operationId": "MobileMoneyCustomerController_createCustomer_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMobileMoneyCustomerDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Customer has been successfully created."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/MobileMoneyCustomerDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Create a mobile money customer",
        "tags": ["CUSTOMER - MOBILE MONEY"]
      },
      "get": {
        "description": "An integrator can use this endpoint to get all the customers who will be either receiving or sending money using mobile money.",
        "operationId": "MobileMoneyCustomerController_getUserCustomers_api/v3",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Customers successfully retrieved."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MobileMoneyCustomerDto"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Forbidden" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get all mobile money customers",
        "tags": ["CUSTOMER - MOBILE MONEY"]
      }
    },
    "/api/v3/customer/mobile-money/{customer_key}": {
      "patch": {
        "description": "An integrator can use this endpoint to update the customers who will be either receiving or sending money using mobile money.",
        "operationId": "MobileMoneyCustomerController_updateCustomer_api/v3",
        "parameters": [
          {
            "name": "customer_key",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMobileMoneyCustomerDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Bio Data has been successfully updated."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/MobileMoneyCustomerDto"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid Api Key"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Not Found" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Update a mobile money customer",
        "tags": ["CUSTOMER - MOBILE MONEY"]
      },
      "get": {
        "description": "An integrator can use this endpoint to get the customer who will be either receiving or sending money using mobile money by passing customer key.",
        "operationId": "MobileMoneyCustomerController_getCustomerDetails_api/v3",
        "parameters": [
          {
            "name": "customer_key",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Customer fetched successfully."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/MobileMoneyCustomerDto"
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "" },
          "404": { "description": "" }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get a mobile money customer by customer key",
        "tags": ["CUSTOMER - MOBILE MONEY"]
      }
    },
    "/api/v3/customer/mobile-money/phone/{phone_number}": {
      "get": {
        "description": "An integrator can use this endpoint to get the customer who will be either receiving or sending money using mobile money by passing phone number.",
        "operationId": "MobileMoneyCustomerController_getCustomerDetailsByPhone_api/v3",
        "parameters": [
          {
            "name": "phone_number",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Customer fetched successfully."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/MobileMoneyCustomerDto"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Customer not found."
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get a mobile money customer by Phone",
        "tags": ["CUSTOMER - MOBILE MONEY"]
      }
    },
    "/api/v3/customer/validate/mobile-money": {
      "post": {
        "description": "Validates a phone number in any format (with or without country code). Returns validation status, country information, formatted number, and whether the country is supported for mobile money.",
        "operationId": "AccountValidationController_validateMobileMoneyAccount_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateMobileMoneyAccountDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Phone number validated successfully."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ValidateAccountResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid request"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Validate phone number",
        "tags": ["CUSTOMER - VALIDATION"]
      }
    },
    "/api/v3/customer/validate/bank": {
      "post": {
        "description": "Validates a bank account number format for a given country and bank code. Returns validation status, bank information, and whether the country is supported.",
        "operationId": "AccountValidationController_validateBankAccount_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateBankAccountDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Bank account validated successfully."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ValidateAccountResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid request"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Validate bank account",
        "tags": ["CUSTOMER - VALIDATION"]
      }
    },
    "/api/v3/withdraw/mobile-money": {
      "post": {
        "description": "This api will withdraw fiat from the integrator’s fiat wallet to the customer’s mobile money wallet.",
        "operationId": "WithdrawController_mobileMoney_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateWithdrawalDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Withdrawal has been successfully created."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/WithdrawResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid API Key"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Withdraw Fiat to Mobile Money",
        "tags": ["WITHDRAW"]
      }
    },
    "/api/v3/withdraw/status/{reference_id}": {
      "get": {
        "description": "This endpoint will return the status of the withdrawal request.",
        "operationId": "WithdrawController_getWithdrawalStatus_api/v3",
        "parameters": [
          {
            "name": "reference_id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Withdrawal status retrieved"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/WithdrawStatusResponseDto"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Reference Id not found"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get Withdrawal Mobile Money Status",
        "tags": ["WITHDRAW"]
      }
    },
    "/api/v3/providers": {
      "post": {
        "description": "This Api Handles fetching of payment providers",
        "operationId": "PaymentProviderController_providers_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PaymentProviderDto" }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "summary": "Get Payment Providers",
        "tags": ["PAYMENT PROVIDERS"]
      }
    },
    "/api/v3/withdraw/v2/bank": {
      "post": {
        "description": "This Api Handles payout to bank, currently only supports SA Banks",
        "operationId": "WithdrawTransactionController_mobileMoney_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawTransactionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Withdrawal has been successfully created."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/WithdrawResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid API Key"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "BANK WITHDRAWAL",
        "tags": ["WITHDRAW V2"]
      }
    },
    "/api/v3/withdraw/v2/bank/status/{referenceId}": {
      "get": {
        "description": "This Api Handles payout to bank, currently only supports SA Banks",
        "operationId": "WithdrawTransactionController_getWithdrawTransaction_api/v3",
        "parameters": [
          {
            "name": "referenceId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "security": [{ "JWT": [] }],
        "summary": "BANK WITHDRAWAL STATUS",
        "tags": ["WITHDRAW V2"]
      }
    },
    "/api/v3/withdraw/v2/bank/supporting-banks/{currency}": {
      "get": {
        "description": "This Api Handles fetching of supporting banks",
        "operationId": "WithdrawTransactionController_getSupportingBanksWithCurrency_api/v3",
        "parameters": [
          {
            "name": "currency",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "security": [{ "JWT": [] }],
        "summary": "GET SUPPORTING BANKS",
        "tags": ["WITHDRAW V2"]
      }
    },
    "/api/v3/kyc": {
      "post": {
        "description": "This api will create a new kyc basic details",
        "operationId": "KycController_createKyc_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/KycBasicDetailsDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Kyc Basic Details created successfully"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/KycResponseDto"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Create Kyc Basic Details",
        "tags": ["KYC"]
      }
    },
    "/api/v3/kyc/address": {
      "post": {
        "description": "This api will create a new kyc address",
        "operationId": "KycController_createAddress_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/KycAddressDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Kyc Address created successfully"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/KycResponseDto"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Create Kyc Address",
        "tags": ["KYC"]
      }
    },
    "/api/v3/kyc/document": {
      "post": {
        "description": "This api will create a new kyc document",
        "operationId": "KycController_createDocument_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/KycDocumentDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Kyc Document created successfully"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/KycResponseDto"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Create Kyc Document",
        "tags": ["KYC"]
      }
    },
    "/api/v3/kyc/status/{kycId}": {
      "get": {
        "description": "This api will get kyc status",
        "operationId": "KycController_verifyKyc_api/v3",
        "parameters": [
          {
            "name": "kycId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved kyc status"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/KycResponseDto"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get Kyc Status",
        "tags": ["KYC"]
      }
    },
    "/api/v3/kyc/integrator/users": {
      "get": {
        "description": "This api will get all integrator kyc users",
        "operationId": "KycController_integratorKycUsers_api/v3",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved kyc users"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IntegratorKycUsersResponseDto"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid API Key"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get Integrator Kyc Users",
        "tags": ["KYC"]
      }
    },
    "/health": {
      "get": {
        "description": "This endpoint is used to check for the health of the application",
        "operationId": "HealthController_check",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "ok" },
                    "info": {
                      "type": "object",
                      "example": { "database": { "status": "up" } },
                      "additionalProperties": {
                        "type": "object",
                        "required": ["status"],
                        "properties": { "status": { "type": "string" } },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "required": ["status"],
                        "properties": { "status": { "type": "string" } },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": { "database": { "status": "up" } },
                      "additionalProperties": {
                        "type": "object",
                        "required": ["status"],
                        "properties": { "status": { "type": "string" } },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "error" },
                    "info": {
                      "type": "object",
                      "example": { "database": { "status": "up" } },
                      "additionalProperties": {
                        "type": "object",
                        "required": ["status"],
                        "properties": { "status": { "type": "string" } },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": ["status"],
                        "properties": { "status": { "type": "string" } },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": { "status": "up" },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": ["status"],
                        "properties": { "status": { "type": "string" } },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Check for the application health",
        "tags": ["HEALTH"]
      }
    },
    "/api/v3/customer/support/countries": {
      "get": {
        "description": "Returns a list of all supported countries with their configurations. Supports filtering by service type, currency, country code, and active status. Data is aggregated from the Provider Registry for real-time accuracy. The isEnabled flag indicates whether the authenticated integrator has this service enabled and providers attached.",
        "operationId": "CountrySupportController_getSupportedCountries_api/v3",
        "parameters": [
          {
            "name": "serviceType",
            "required": false,
            "in": "query",
            "description": "Filter by service type",
            "schema": {
              "example": "WITHDRAW",
              "type": "string",
              "enum": ["DEPOSIT", "CARD_DEPOSIT", "WITHDRAW", "DETAILS"]
            }
          },
          {
            "name": "currency",
            "required": false,
            "in": "query",
            "description": "Filter by currency",
            "schema": {
              "example": "KES",
              "type": "string",
              "enum": [
                "KES",
                "GHS",
                "NGN",
                "ZAR",
                "ZAR",
                "USD",
                "XOF",
                "ZMW",
                "XAF",
                "SLE",
                "CDF",
                "TZS",
                "UGX",
                "EGP",
                "MWK",
                "RWF",
                "ETB",
                "MZN",
                "LSL",
                "GNF"
              ]
            }
          },
          {
            "name": "countryCode",
            "required": false,
            "in": "query",
            "description": "Filter by country code (e.g., KE, NG, GH)",
            "schema": { "example": "KE", "type": "string" }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": { "example": true, "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Countries retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CountrySupportResponseDto"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid query parameters"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get supported countries",
        "tags": ["CUSTOMER - COUNTRY SUPPORT"]
      }
    },
    "/api/v3/customer/support/countries/{countryCode}": {
      "get": {
        "description": "Returns comprehensive details about a specific country including supported currencies, networks, and service availability. The isEnabled flag indicates whether the authenticated integrator has each service enabled and providers attached.",
        "operationId": "CountrySupportController_getCountryDetails_api/v3",
        "parameters": [
          {
            "name": "countryCode",
            "required": true,
            "in": "path",
            "description": "Country code (e.g., KE, NG, GH)",
            "schema": { "example": "KE", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Country details retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Country not found"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get detailed country information",
        "tags": ["CUSTOMER - COUNTRY SUPPORT"]
      }
    },
    "/api/v3/customer/support/networks/{countryCode}": {
      "get": {
        "description": "Returns all active mobile money networks available in a specific country, aggregated from all providers. Indicates if network selection is required.",
        "operationId": "CountrySupportController_getNetworkAvailability_api/v3",
        "parameters": [
          {
            "name": "countryCode",
            "required": true,
            "in": "path",
            "description": "Country code (e.g., KE, NG, GH)",
            "schema": { "example": "KE", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Networks retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/NetworkAvailabilityResponseDto"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get available networks for a country",
        "tags": ["CUSTOMER - COUNTRY SUPPORT"]
      }
    },
    "/api/v3/customer/support/banks": {
      "get": {
        "description": "Returns a list of all supported banks with optional filtering by currency or search term. Banks are sourced from the centralized bank data registry.",
        "operationId": "CountrySupportController_getBanks_api/v3",
        "parameters": [
          {
            "name": "currency",
            "required": false,
            "in": "query",
            "description": "Filter by currency",
            "schema": {
              "example": "KES",
              "type": "string",
              "enum": [
                "KES",
                "GHS",
                "NGN",
                "ZAR",
                "ZAR",
                "USD",
                "XOF",
                "ZMW",
                "XAF",
                "SLE",
                "CDF",
                "TZS",
                "UGX",
                "EGP",
                "MWK",
                "RWF",
                "ETB",
                "MZN",
                "LSL",
                "GNF"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search bank by name",
            "schema": { "example": "equity", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Banks retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BankResponseDto"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid query parameters"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get available banks",
        "tags": ["CUSTOMER - COUNTRY SUPPORT"]
      }
    },
    "/api/v3/customer/support/services/deposit": {
      "get": {
        "description": "Returns all countries that support deposit (onramp) services with their configurations.",
        "operationId": "CountrySupportController_getDepositConfiguration_api/v3",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Deposit configuration retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ServiceConfigurationResponseDto"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get deposit service configuration",
        "tags": ["CUSTOMER - COUNTRY SUPPORT"]
      }
    },
    "/api/v3/customer/support/services/withdraw": {
      "get": {
        "description": "Returns all countries that support withdraw (offramp) services with their configurations.",
        "operationId": "CountrySupportController_getWithdrawConfiguration_api/v3",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Withdraw configuration retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ServiceConfigurationResponseDto"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get withdraw service configuration",
        "tags": ["CUSTOMER - COUNTRY SUPPORT"]
      }
    },
    "/api/v3/offramp": {
      "post": {
        "description": "This endpoint will create a offramp request for a customer. If the fiat transfer fails after successful crypto receipt, an automatic refund will be initiated after 5 minutes. Use the refund-status endpoint to check refund status.",
        "operationId": "OffRampController_createOfframp_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OfframpDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Offramp Response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Offramp has been successfully created"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/OfframpResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Offramp Request",
        "tags": ["OFFRAMP"]
      }
    },
    "/api/v3/offramp/transactions": {
      "get": {
        "description": "This endpoint will return all offramp transactions for the integrator.",
        "operationId": "OffRampController_getIntegratorOfframps_api/v3",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Offramp transactions retrieved"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OfframpResponseDto"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get Integrator Offramp Transactions",
        "tags": ["OFFRAMP"]
      }
    },
    "/api/v3/offramp/{referenceId}": {
      "get": {
        "description": "This endpoint will return the status of the withdrawal request.",
        "operationId": "OffRampController_getOfframpStatus_api/v3",
        "parameters": [
          {
            "name": "referenceId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Offramp status retrieved"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/OfframpResponseDto"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Reference Id not found"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get Offramp MobileMoney Status",
        "tags": ["OFFRAMP"]
      }
    },
    "/api/v3/offramp/cancel/{referenceId}": {
      "get": {
        "description": "This endpoint will cancel the offramp transaction.",
        "operationId": "OffRampController_getCancelTransaction_api/v3",
        "parameters": [
          {
            "name": "referenceId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Reference Id not found"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Cancel Offramp Transaction",
        "tags": ["OFFRAMP"]
      }
    },
    "/api/v3/offramp/refund-status/{referenceId}": {
      "get": {
        "description": "Get the status of an onchain refund. Refunds are automatically initiated 5 minutes after a failed transaction if the crypto was successfully received but fiat transfer failed.",
        "operationId": "OffRampController_getRefundStatus_api/v3",
        "parameters": [
          {
            "name": "referenceId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "security": [{ "JWT": [] }],
        "summary": "Get Refund Status",
        "tags": ["OFFRAMP"]
      }
    },
    "/api/v3/offramp/retry-refund/{referenceId}": {
      "post": {
        "description": "Retry a failed crypto refund for an offramp transaction. Can be retried up to 3 times.",
        "operationId": "OffRampController_retryRefund_api/v3",
        "parameters": [
          {
            "name": "referenceId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Cannot retry refund"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Reference Id not found"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Retry Failed Refund",
        "tags": ["OFFRAMP"]
      }
    },
    "/api/v3/onramp/crypto": {
      "post": {
        "description": "This endpoint will send token to any crypto wallet",
        "operationId": "OnrampController_createOnrampCrypto_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateOnrampCryptoDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Request has been successfully created"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/OnrampCryptoResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid API Key"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Send Token to Crypto Wallet",
        "tags": ["ONRAMP"]
      }
    },
    "/api/v3/onramp/crypto/{referenceId}": {
      "get": {
        "description": "This endpoint will be used to get the status of the transaction",
        "operationId": "OnrampController_getOnrampCrypto_api/v3",
        "parameters": [
          {
            "name": "referenceId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Onramp crypto status successfully retrieved."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/OnrampCryptoResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Not Found" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get Status Response",
        "tags": ["ONRAMP"]
      }
    },
    "/api/v3/onramp": {
      "post": {
        "description": "You can create an onramp request with either mobile money or bank checkout",
        "operationId": "OnrampController_onramp_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OnrampDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Request has been successfully created"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/OnrampRequestResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid API Key"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Create Onramp",
        "tags": ["ONRAMP"]
      }
    },
    "/api/v3/onramp/{referenceId}": {
      "get": {
        "description": "This endpoint will be used to get the status of the transaction",
        "operationId": "OnrampController_getOnramp_api/v3",
        "parameters": [
          {
            "name": "referenceId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Onramp status successfully retrieved."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/OnrampResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Not Found" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get Status Response",
        "tags": ["ONRAMP"]
      }
    },
    "/api/v3/dashboard/bulk-payments/api/transactions/{transactionId}": {
      "get": {
        "operationId": "ApiBulkPaymentsController_getTransactionById_api/v3",
        "parameters": [
          {
            "name": "transactionId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPaymentTransactionResponseDto"
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get transaction details with batches",
        "tags": ["API Bulk Payments"]
      }
    },
    "/api/v3/dashboard/bulk-payments/api/transactions": {
      "get": {
        "operationId": "ApiBulkPaymentsController_getTransactions_api/v3",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": { "type": "number" }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": { "type": "number" }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": { "type": "string" }
          },
          {
            "name": "currency",
            "required": false,
            "in": "query",
            "description": "Filter by currency",
            "schema": {
              "type": "string",
              "enum": [
                "KES",
                "GHS",
                "NGN",
                "ZAR",
                "ZAR",
                "USD",
                "XOF",
                "ZMW",
                "XAF",
                "SLE",
                "CDF",
                "TZS",
                "UGX",
                "EGP",
                "MWK",
                "RWF",
                "ETB",
                "MZN",
                "LSL",
                "GNF"
              ]
            }
          }
        ],
        "responses": {
          "200": { "description": "Transactions retrieved successfully" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get paginated transactions",
        "tags": ["API Bulk Payments"]
      }
    },
    "/api/v3/dashboard/bulk-payments/api/wallets": {
      "get": {
        "operationId": "ApiBulkPaymentsController_getAvailableWallets_api/v3",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Available wallets retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/AvailableWalletDto" }
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get available wallets for bulk payments",
        "tags": ["API Bulk Payments"]
      }
    },
    "/api/v3/dashboard/bulk-payments/api/validate-csv": {
      "post": {
        "operationId": "ApiBulkPaymentsController_validateCSV_api/v3",
        "parameters": [],
        "responses": {
          "200": {
            "description": "CSV validation results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CSVValidationResponseDto"
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Validate CSV file for bulk payments with multi-currency support",
        "tags": ["API Bulk Payments"]
      }
    },
    "/api/v3/dashboard/bulk-payments/api/batches/create": {
      "post": {
        "operationId": "ApiBulkPaymentsController_createBatches_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBulkPaymentRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created bulk payment batch",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BulkPaymentBatchResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Create bulk payment batches",
        "tags": ["API Bulk Payments"]
      }
    },
    "/api/v3/dashboard/bulk-payments/api/preview": {
      "post": {
        "operationId": "ApiBulkPaymentsController_previewBatch_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBulkPaymentRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Preview of bulk payment batch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPaymentPreviewDto"
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Preview bulk payment batches",
        "tags": ["API Bulk Payments"]
      }
    },
    "/api/v3/dashboard/bulk-payments/api/batches": {
      "get": {
        "operationId": "ApiBulkPaymentsController_getBatches_api/v3",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": { "type": "number" }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": { "type": "number" }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": { "type": "string" }
          },
          {
            "name": "currency",
            "required": false,
            "in": "query",
            "description": "Filter by currency",
            "schema": {
              "type": "string",
              "enum": [
                "KES",
                "GHS",
                "NGN",
                "ZAR",
                "ZAR",
                "USD",
                "XOF",
                "ZMW",
                "XAF",
                "SLE",
                "CDF",
                "TZS",
                "UGX",
                "EGP",
                "MWK",
                "RWF",
                "ETB",
                "MZN",
                "LSL",
                "GNF"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bulk payment batches retrieved successfully"
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get bulk payment batches",
        "tags": ["API Bulk Payments"]
      }
    },
    "/api/v3/dashboard/bulk-payments/api/stats": {
      "get": {
        "operationId": "ApiBulkPaymentsController_getStats_api/v3",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": { "type": "number" }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": { "type": "number" }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": { "type": "string" }
          },
          {
            "name": "currency",
            "required": false,
            "in": "query",
            "description": "Filter by currency",
            "schema": {
              "type": "string",
              "enum": [
                "KES",
                "GHS",
                "NGN",
                "ZAR",
                "ZAR",
                "USD",
                "XOF",
                "ZMW",
                "XAF",
                "SLE",
                "CDF",
                "TZS",
                "UGX",
                "EGP",
                "MWK",
                "RWF",
                "ETB",
                "MZN",
                "LSL",
                "GNF"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bulk payment statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BulkPaymentStatsDto" }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get bulk payment statistics",
        "tags": ["API Bulk Payments"]
      }
    },
    "/api/v3/dashboard/bulk-payments/api/batches/{batchId}": {
      "get": {
        "operationId": "ApiBulkPaymentsController_getBatchById_api/v3",
        "parameters": [
          {
            "name": "batchId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Bulk payment batch retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPaymentDetailsResponseDto"
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get bulk payment batch by ID",
        "tags": ["API Bulk Payments"]
      }
    },
    "/api/v3/dashboard/bulk-payments/api/batches/{batchId}/process": {
      "post": {
        "operationId": "ApiBulkPaymentsController_processBatch_api/v3",
        "parameters": [
          {
            "name": "batchId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Bulk payment batch processed successfully" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Process a bulk payment batch",
        "tags": ["API Bulk Payments"]
      }
    },
    "/api/v3/dashboard/bulk-payments/api/batches/{batchId}/payments": {
      "get": {
        "operationId": "ApiBulkPaymentsController_getBatchPayments_api/v3",
        "parameters": [
          {
            "name": "batchId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": { "type": "number" }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": { "type": "number" }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": { "type": "string" }
          },
          {
            "name": "currency",
            "required": false,
            "in": "query",
            "description": "Filter by currency",
            "schema": {
              "type": "string",
              "enum": [
                "KES",
                "GHS",
                "NGN",
                "ZAR",
                "ZAR",
                "USD",
                "XOF",
                "ZMW",
                "XAF",
                "SLE",
                "CDF",
                "TZS",
                "UGX",
                "EGP",
                "MWK",
                "RWF",
                "ETB",
                "MZN",
                "LSL",
                "GNF"
              ]
            }
          }
        ],
        "responses": {
          "200": { "description": "Batch payments retrieved successfully" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get payments for a specific batch",
        "tags": ["API Bulk Payments"]
      }
    },
    "/api/v3/cross-boarder/invoice": {
      "post": {
        "description": "Generate Invoice",
        "operationId": "FiatToFiatController_generateInvoice_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GenerateInvoiceDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Invoice has been successfully created"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/DepositResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid API Key"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Generate Invoice",
        "tags": ["CROSS BOARDER"]
      }
    },
    "/api/v3/cross-boarder/invoice/{referenceId}": {
      "get": {
        "description": "Get Invoice",
        "operationId": "FiatToFiatController_getInvoice_api/v3",
        "parameters": [
          {
            "name": "referenceId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Invoice successfully retrieved"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/GetInvoiceResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid API Key"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get Invoice",
        "tags": ["CROSS BOARDER"]
      }
    },
    "/api/v3/cross-boarder/invoice/pay": {
      "post": {
        "description": "Pay Invoice",
        "operationId": "FiatToFiatController_payInvoice_api/v3",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PayInvoiceDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Invoice successfully retrieved"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/PayInvoiceResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid API Key"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Pay Invoice",
        "tags": ["CROSS BOARDER"]
      }
    },
    "/api/v3/cross-boarder/invoice/pay/{referenceId}": {
      "get": {
        "description": "Get Paid Invoice Status",
        "operationId": "FiatToFiatController_getPaidInvoiceStatus_api/v3",
        "parameters": [
          {
            "name": "referenceId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Invoice successfully retrieved"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/PayInvoiceResponseDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Bad Request" },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Invalid API Key"
                    },
                    "data": { "type": "object", "example": {} }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT": [] }],
        "summary": "Get Paid Invoice Status",
        "tags": ["CROSS BOARDER"]
      }
    }
  },
  "info": {
    "title": "KOTANI PAY API PLATFORM",
    "description": "",
    "version": "3.0",
    "contact": {}
  },
  "tags": [],
  "servers": [{ "url": "https://sandbox-api.kotanipay.com" }],
  "components": {
    "securitySchemes": {
      "JWT": { "scheme": "bearer", "bearerFormat": "JWT", "type": "http" }
    },
    "schemas": {
      "RateResponseDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "From currency",
            "example": "USD"
          },
          "to": {
            "type": "string",
            "description": "To currency",
            "example": "EUR"
          },
          "value": {
            "type": "string",
            "description": "Rate value",
            "example": "0.85"
          }
        },
        "required": ["from", "to", "value"]
      },
      "OnchainRateResponseDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "From currency",
            "example": "USD"
          },
          "to": {
            "type": "string",
            "description": "To currency",
            "example": "EUR"
          },
          "value": {
            "type": "string",
            "description": "Rate value",
            "example": "0.85"
          },
          "id": {
            "type": "string",
            "description": "Rate ID",
            "example": "1234567890"
          },
          "fiatAmount": {
            "type": "number",
            "description": "Fiat amount",
            "example": "100"
          },
          "cryptoAmount": {
            "type": "number",
            "description": "Crypto amount",
            "example": "100"
          },
          "transactionAmount": {
            "type": "number",
            "description": "Transaction amount",
            "example": "100"
          },
          "fee": { "type": "number", "description": "Fee", "example": "100" }
        },
        "required": [
          "from",
          "to",
          "value",
          "id",
          "fiatAmount",
          "cryptoAmount",
          "transactionAmount",
          "fee"
        ]
      },
      "Currency": {
        "type": "string",
        "enum": [
          "KES",
          "GHS",
          "NGN",
          "ZAR",
          "ZAR",
          "USD",
          "XOF",
          "ZMW",
          "XAF",
          "SLE",
          "CDF",
          "TZS",
          "UGX",
          "EGP",
          "MWK",
          "RWF",
          "ETB",
          "MZN",
          "LSL",
          "GNF"
        ],
        "description": "From currency"
      },
      "STABLE_COIN": {
        "type": "string",
        "enum": ["CUSD", "USDC", "USDT", "USDGLO", "CKES", "CGHS", "MSAT"],
        "description": "To currency"
      },
      "OnrampRateRequest": {
        "type": "object",
        "properties": {
          "from": {
            "description": "From currency",
            "example": "KES",
            "allOf": [{ "$ref": "#/components/schemas/Currency" }]
          },
          "to": {
            "description": "To currency",
            "example": "USDT",
            "allOf": [{ "$ref": "#/components/schemas/STABLE_COIN" }]
          },
          "fiatAmount": {
            "type": "number",
            "description": "Rate value",
            "example": "0.85"
          }
        },
        "required": ["from", "to", "fiatAmount"]
      },
      "OfframpRateRequest": {
        "type": "object",
        "properties": {
          "from": {
            "description": "From currency",
            "example": "USDC",
            "allOf": [{ "$ref": "#/components/schemas/STABLE_COIN" }]
          },
          "to": {
            "description": "To currency",
            "example": "EUR",
            "allOf": [{ "$ref": "#/components/schemas/Currency" }]
          },
          "cryptoAmount": {
            "type": "number",
            "description": "Rate value",
            "example": "0.85"
          }
        },
        "required": ["from", "to", "cryptoAmount"]
      },
      "FiatToFiatRateResponseDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "From currency",
            "example": "USD"
          },
          "to": {
            "type": "string",
            "description": "To currency",
            "example": "EUR"
          },
          "value": {
            "type": "string",
            "description": "Rate value",
            "example": "0.85"
          },
          "depositAmount": {
            "type": "number",
            "description": "Deposit amount",
            "example": "100"
          },
          "withdrawalAmount": {
            "type": "number",
            "description": "Withdrawal amount",
            "example": "100"
          },
          "depositTransactionAmount": {
            "type": "number",
            "description": "Deposit transaction amount",
            "example": "100"
          },
          "withdrawalTransactionAmount": {
            "type": "number",
            "description": "Withdrawal transaction amount",
            "example": "100"
          },
          "depositFee": {
            "type": "number",
            "description": "Deposit fee",
            "example": "100"
          },
          "withdrawalFee": {
            "type": "number",
            "description": "Withdrawal fee",
            "example": "100"
          }
        },
        "required": [
          "from",
          "to",
          "value",
          "depositAmount",
          "withdrawalAmount",
          "depositTransactionAmount",
          "withdrawalTransactionAmount",
          "depositFee",
          "withdrawalFee"
        ]
      },
      "FiatRateRequestDto": {
        "type": "object",
        "properties": {
          "from": {
            "description": "From currency",
            "example": "KES",
            "allOf": [{ "$ref": "#/components/schemas/Currency" }]
          },
          "to": {
            "description": "To currency",
            "example": "EUR",
            "allOf": [{ "$ref": "#/components/schemas/Currency" }]
          },
          "amount": {
            "type": "number",
            "description": "Rate value",
            "example": "0.85"
          }
        },
        "required": ["from", "to", "amount"]
      },
      "ApiResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "The status of the response",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "The message of the response",
            "example": "Response message"
          },
          "data": { "type": "object" }
        },
        "required": ["success", "message", "data"]
      },
      "WalletType": {
        "type": "string",
        "enum": ["crypto", "fiat"],
        "description": "Select wallet type"
      },
      "COUNTRY": {
        "type": "string",
        "enum": [
          "GHA",
          "NG",
          "KE",
          "ZA",
          "CIV",
          "ZM",
          "CMR",
          "COD",
          "SEN",
          "TZ",
          "MWI",
          "UG",
          "EG",
          "RW",
          "ETH",
          "MAR",
          "TUN",
          "DZA",
          "BWA",
          "MLI",
          "BFA",
          "LBY",
          "SDN",
          "BDI",
          "DJI",
          "SOM",
          "MDG",
          "MUS",
          "CPV",
          "GMB",
          "GIN",
          "SLE",
          "LBR",
          "MRT",
          "NER",
          "TGO",
          "BEN",
          "GNB",
          "CAF",
          "TCD",
          "COD",
          "GNQ",
          "GAB",
          "STP",
          "COM",
          "SYC",
          "ERI",
          "SSD",
          "LSO",
          "SWZ",
          "NAM",
          "AGO",
          "MOZ",
          "ZWE"
        ],
        "description": "The country where the wallet will be used"
      },
      "WalletStatus": {
        "type": "string",
        "enum": ["active", "inactive", "suspended", "deleted"],
        "description": "The status of the wallet"
      },
      "FiatWalletResponseDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the wallet",
            "example": "My Wallet"
          },
          "type": {
            "description": "Select wallet type",
            "example": "eg crypto or fiat",
            "allOf": [{ "$ref": "#/components/schemas/WalletType" }]
          },
          "currency": {
            "description": "The currency of the wallet",
            "example": "eg NGN or GHS or KES",
            "allOf": [{ "$ref": "#/components/schemas/Currency" }]
          },
          "country": {
            "description": "The country where the wallet will be used",
            "example": "GHA",
            "allOf": [{ "$ref": "#/components/schemas/COUNTRY" }]
          },
          "integrator": {
            "type": "string",
            "description": "The integrator of the wallet",
            "example": "4440cb6a-f7c7-11ed-b67e-0242ac120002"
          },
          "status": {
            "description": "The status of the wallet",
            "example": "eg active or inactive",
            "allOf": [{ "$ref": "#/components/schemas/WalletStatus" }]
          },
          "id": {
            "type": "string",
            "description": "The id of the wallet",
            "example": "f053188c-d924-4423-bbba-871eda0b1cd9"
          },
          "balance": {
            "type": "number",
            "description": "The amount of the wallet",
            "example": 1000
          },
          "deposit_balance": {
            "type": "number",
            "description": "Amount of the wallet that has been deposited so far",
            "example": 1000
          }
        },
        "required": [
          "name",
          "type",
          "currency",
          "integrator",
          "id",
          "balance",
          "deposit_balance"
        ]
      },
      "CreateFiatWalletDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the wallet",
            "example": "My Wallet"
          },
          "currency": {
            "description": "The currency of the wallet",
            "example": "eg NGN or GHS or KES",
            "allOf": [{ "$ref": "#/components/schemas/Currency" }]
          },
          "country": {
            "description": "The country where the wallet will be used",
            "example": "GHA",
            "allOf": [{ "$ref": "#/components/schemas/COUNTRY" }]
          }
        },
        "required": ["name", "currency"]
      },
      "updateFiatWalletDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the wallet",
            "example": "My Wallet"
          },
          "country": {
            "description": "The country where the wallet will be used",
            "example": "GHA",
            "allOf": [{ "$ref": "#/components/schemas/COUNTRY" }]
          }
        },
        "required": ["name"]
      },
      "TransferDepositBalanceDto": {
        "type": "object",
        "properties": {
          "walletId": {
            "type": "string",
            "description": "The ID of the fiat wallet."
          },
          "amount": {
            "type": "number",
            "description": "The amount to transfer from the deposit balance to the main balance."
          }
        },
        "required": ["walletId"]
      },
      "StableCoin": {
        "type": "string",
        "enum": [
          "CUSD",
          "USDC",
          "USDT",
          "USDT0",
          "SAT",
          "BTC",
          "HASH",
          "FUSE",
          "HBAR",
          "USDGLO",
          "CKES",
          "CGHS",
          "MSAT",
          "XLM"
        ],
        "description": "The currency of the wallet"
      },
      "Chain": {
        "type": "string",
        "enum": [
          "ETHEREUM",
          "CELO",
          "AVALANCHE",
          "POLYGON",
          "ARBITRUM",
          "OPTIMISM",
          "STELLAR",
          "TRON",
          "FUSE",
          "LIGHTNING",
          "SOLANA",
          "PROVENANCE",
          "CARDANO",
          "HEDERA",
          "BASE",
          "LISK",
          "VICTION",
          "SCROLL"
        ],
        "description": "The chain of the wallet.Its required if the wallet is a crypto wallet"
      },
      "CryptoWalletResponseDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the wallet",
            "example": "My Wallet"
          },
          "balance": {
            "type": "number",
            "description": "The amount of the wallet",
            "example": 1000
          },
          "address": {
            "type": "string",
            "description": "Wallet transaction address",
            "example": "0x1234567890"
          },
          "customAddress": {
            "type": "string",
            "description": "custom for deposits public address",
            "example": "0x1234567890"
          },
          "type": {
            "description": "Select wallet type",
            "example": "eg crypto or fiat",
            "allOf": [{ "$ref": "#/components/schemas/WalletType" }]
          },
          "coin": {
            "description": "The currency of the wallet",
            "example": "eg CUSD or USDC or USDT",
            "allOf": [{ "$ref": "#/components/schemas/StableCoin" }]
          },
          "chain": {
            "description": "The chain of the wallet.Its required if the wallet is a crypto wallet",
            "example": "eg CELO or ETHEREUM or AVALANCHE or POLYGON",
            "allOf": [{ "$ref": "#/components/schemas/Chain" }]
          },
          "id": {
            "type": "string",
            "description": "The id of the wallet",
            "example": "f053188c-d924-4423-bbba-871eda0b1cd9"
          },
          "tokenBalance": {
            "description": "The token balance of the wallet",
            "example": [
              { "token": "USDT", "balance": "1000", "fiatValue": "1000" }
            ],
            "type": "array",
            "items": { "type": "string" }
          },
          "fiatBalance": {
            "type": "number",
            "description": "Total fiat value of the wallet balances (USD)",
            "example": 1000
          },
          "fiatCurrency": {
            "type": "string",
            "description": "Fiat currency used for wallet balance conversion",
            "example": "USD"
          }
        },
        "required": ["name", "balance", "type", "coin", "id"]
      },
      "CreateCryptoWalletDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the wallet",
            "example": "My Wallet"
          },
          "chain": {
            "description": "The chain of the wallet.Its required if the wallet is a crypto wallet",
            "example": "eg CELO or ETHEREUM or AVALANCHE or POLYGON",
            "allOf": [{ "$ref": "#/components/schemas/Chain" }]
          }
        },
        "required": ["name"]
      },
      "GetCryptoWalletResponseDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the wallet",
            "example": "My Wallet"
          },
          "balance": {
            "type": "number",
            "description": "The amount of the wallet",
            "example": 1000
          },
          "privateAddress": {
            "type": "string",
            "description": "Wallet private address",
            "example": "0x1234567890"
          },
          "publicAddress": {
            "type": "string",
            "description": "Wallet public address",
            "example": "0x1234567890"
          },
          "address": {
            "type": "string",
            "description": "Wallet transaction address",
            "example": "0x1234567890"
          },
          "customAddress": {
            "type": "string",
            "description": "custom for deposits public address",
            "example": "0x1234567890"
          },
          "type": {
            "description": "Select wallet type",
            "example": "eg crypto or fiat",
            "allOf": [{ "$ref": "#/components/schemas/WalletType" }]
          },
          "coin": {
            "description": "The currency of the wallet",
            "example": "eg CUSD or USDC or USDT",
            "allOf": [{ "$ref": "#/components/schemas/StableCoin" }]
          },
          "chain": {
            "description": "The chain of the wallet.Its required if the wallet is a crypto wallet",
            "example": "eg CELO or ETHEREUM or AVALANCHE or POLYGON",
            "allOf": [{ "$ref": "#/components/schemas/Chain" }]
          },
          "id": {
            "type": "string",
            "description": "The id of the wallet",
            "example": "f053188c-d924-4423-bbba-871eda0b1cd9"
          },
          "tokenBalance": {
            "description": "The token balance of the wallet",
            "example": [
              { "token": "USDT", "balance": "1000", "fiatValue": "1000" }
            ],
            "type": "array",
            "items": { "type": "string" }
          },
          "fiatBalance": {
            "type": "number",
            "description": "Total fiat value of the wallet balances (USD)",
            "example": 1000
          },
          "fiatCurrency": {
            "type": "string",
            "description": "Fiat currency used for wallet balance conversion",
            "example": "USD"
          }
        },
        "required": ["name", "balance", "type", "coin", "id"]
      },
      "IntegratorResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id",
            "example": "xxxxxxxxxxxxxxxxxxxxxxxx"
          },
          "organization": {
            "type": "string",
            "description": "organization",
            "example": "A&B Company"
          },
          "first_name": {
            "type": "string",
            "description": "first_name",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "last_name",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "email",
            "example": "ab@gmail.com"
          },
          "phone": {
            "type": "string",
            "description": "phone",
            "example": "+xxx xxx xxx xxx"
          },
          "webhook_url": {
            "type": "string",
            "description": "Default webhook callback URL",
            "example": "https://example.com/kotani/webhooks"
          },
          "webhook_events": {
            "type": "array",
            "description": "Webhook events this integrator is subscribed to",
            "example": ["transaction.status.updated", "payment.confirmed"],
            "items": {
              "type": "string",
              "enum": [
                "transaction.status.updated",
                "payment.confirmed",
                "kyc.status.changed",
                "system.event"
              ]
            }
          }
        },
        "required": [
          "organization",
          "first_name",
          "last_name",
          "email",
          "phone"
        ]
      },
      "CreateIntegratorDto": {
        "type": "object",
        "properties": {
          "organization": {
            "type": "string",
            "description": "organization",
            "example": "A&B Company"
          },
          "product_name": {
            "type": "string",
            "description": "product name",
            "example": "MY APP NAME"
          },
          "first_name": {
            "type": "string",
            "description": "first_name",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "last_name",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "email",
            "example": "ab@gmail.com"
          },
          "phone": {
            "type": "string",
            "description": "phone",
            "example": "+xxx xxx xxx xxx"
          },
          "country_code": {
            "type": "string",
            "description": "country_code",
            "example": "US"
          },
          "webhook_url": {
            "type": "string",
            "description": "Default webhook callback URL",
            "example": "https://example.com/kotani/webhooks"
          },
          "webhook_secret": {
            "type": "string",
            "description": "Shared secret used to sign webhook payloads",
            "example": "whsec_xxx"
          },
          "webhook_events": {
            "type": "array",
            "description": "Webhook events this integrator is subscribed to",
            "example": ["transaction.status.updated", "payment.confirmed"],
            "items": {
              "type": "string",
              "enum": [
                "transaction.status.updated",
                "payment.confirmed",
                "kyc.status.changed",
                "system.event"
              ]
            }
          }
        },
        "required": [
          "organization",
          "product_name",
          "first_name",
          "last_name",
          "email",
          "phone",
          "country_code"
        ]
      },
      "UpdateIntegratorWebhookDto": {
        "type": "object",
        "properties": {
          "webhook_url": {
            "type": "string",
            "description": "Default webhook callback URL",
            "example": "https://example.com/kotani/webhooks"
          },
          "webhook_secret": {
            "type": "string",
            "description": "Shared secret used to sign webhook payloads",
            "example": "whsec_1234567890abcdef"
          },
          "webhook_events": {
            "type": "array",
            "description": "Webhook events this integrator should receive",
            "example": ["transaction.status.updated"],
            "items": {
              "type": "string",
              "enum": [
                "transaction.status.updated",
                "payment.confirmed",
                "kyc.status.changed",
                "system.event"
              ]
            }
          }
        }
      },
      "ApiKeyResponseDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "key",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          }
        },
        "required": ["key"]
      },
      "VerifyResponseDto": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "user_id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          },
          "session_id": {
            "type": "string",
            "description": "session_id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          },
          "token_id": {
            "type": "string",
            "description": "token_id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          },
          "token": {
            "type": "string",
            "description": "JWT access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
          },
          "refresh_token": {
            "type": "string",
            "description": "JWT refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
          }
        },
        "required": [
          "user_id",
          "session_id",
          "token_id",
          "token",
          "refresh_token"
        ]
      },
      "HumanVerifyDto": {
        "type": "object",
        "properties": {
          "verificationToken": {
            "type": "string",
            "description": "Verification token from previous response",
            "example": "encrypted_verification_token_here"
          }
        },
        "required": ["verificationToken"]
      },
      "RefreshTokenResponseDto": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "user_id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          },
          "session_id": {
            "type": "string",
            "description": "session_id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          },
          "token": {
            "type": "string",
            "description": "JWT access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
          },
          "refresh_token": {
            "type": "string",
            "description": "JWT refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
          }
        },
        "required": ["user_id", "session_id", "token", "refresh_token"]
      },
      "DepositResponseDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "message": { "type": "string" },
          "reference_id": { "type": "string" },
          "reference_number": { "type": "number" },
          "customer_key": { "type": "string" },
          "redirect_url": { "type": "string" }
        },
        "required": ["id", "message", "reference_id", "reference_number"]
      },
      "CreateDepositDto": {
        "type": "object",
        "properties": {
          "customer_key": {
            "type": "string",
            "example": "customer-key-123",
            "description": "Customer key"
          },
          "amount": {
            "type": "number",
            "description": "amount to deposit",
            "example": 10
          },
          "wallet_id": {
            "type": "string",
            "description": "deposit id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          },
          "callback_url": {
            "type": "string",
            "description": "callback url",
            "example": "https://example.com"
          },
          "reference_id": {
            "type": "string",
            "description": "reference id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          }
        },
        "required": ["customer_key", "amount", "wallet_id"]
      },
      "DEPOSIT_STATUS": {
        "type": "string",
        "enum": [
          "PENDING",
          "INITIATED",
          "SUCCESSFUL",
          "FAILED",
          "EXPIRED",
          "CANCELLED",
          "DECLINED",
          "REVERSED",
          "IN_PROGRESS",
          "DUPLICATE",
          "ERROR_OCCURRED",
          "REQUIRE_REVIEW",
          "SUCCESS",
          "RETRY",
          "PERMANENTLY_FAILED"
        ]
      },
      "DepositStatusResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "deposit id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          },
          "amount": {
            "type": "number",
            "description": "amount to deposit",
            "example": 10
          },
          "wallet_id": {
            "type": "string",
            "description": "deposit id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          },
          "callback_url": {
            "type": "string",
            "description": "callback url",
            "example": "https://example.com"
          },
          "reference_id": {
            "type": "string",
            "description": "reference id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          },
          "provider": { "type": "string" },
          "providerReference": { "type": "string" },
          "providerRequest": { "type": "string" },
          "providerResponse": { "type": "string" },
          "callbackUrlStatus": { "type": "number" },
          "callbackResponse": { "type": "string" },
          "callbackPayload": { "type": "object" },
          "transactionError": { "type": "string" },
          "retries": { "type": "number" },
          "network": { "type": "string" },
          "currency": { "type": "string" },
          "environment": { "type": "string" },
          "integratorsAmount": { "type": "number" },
          "wallet": { "type": "object" },
          "customer": { "type": "object" },
          "paymentLinkTransaction": { "type": "object" },
          "updatedAt": { "type": "string" },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/DEPOSIT_STATUS" }]
          },
          "confirmation_id": { "type": "string" },
          "reference_number": { "type": "number" },
          "created_at": { "format": "date-time", "type": "string" },
          "transaction_cost": { "type": "number" },
          "transaction_amount": { "type": "number" },
          "customer_key": { "type": "string" },
          "threeDSEci": { "type": "string" },
          "uniqueIdentifier": { "type": "string" },
          "initialDepositBalance": { "type": "number" },
          "finalDepositBalance": { "type": "number" },
          "error_message": { "type": "string" },
          "error_code": { "type": "string" },
          "error_description": { "type": "string" }
        },
        "required": [
          "id",
          "amount",
          "wallet_id",
          "status",
          "reference_number",
          "created_at",
          "transaction_cost",
          "transaction_amount",
          "customer_key"
        ]
      },
      "CheckoutPaymentMethod": {
        "type": "string",
        "enum": ["PAYBYBANK", "CARD"],
        "description": "Payment Method"
      },
      "BankDepositCheckoutDto": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "description": "full name",
            "example": "John Doe"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Customer Phone Number",
            "example": "+245XXXXXXXXX"
          },
          "paymentMethod": {
            "description": "Payment Method",
            "example": "PAYBYBANK",
            "allOf": [{ "$ref": "#/components/schemas/CheckoutPaymentMethod" }]
          },
          "currency": {
            "description": "Transaction currency",
            "example": "eg ZAR",
            "allOf": [{ "$ref": "#/components/schemas/Currency" }]
          },
          "country": {
            "description": "Country where the wallet is used (optional if derivable from currency)",
            "example": "ZA",
            "allOf": [{ "$ref": "#/components/schemas/COUNTRY" }]
          },
          "referenceId": {
            "type": "string",
            "description": "reference id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          },
          "amount": {
            "type": "number",
            "description": "amount to deposit",
            "example": 10
          },
          "callbackUrl": {
            "type": "string",
            "description": "callback url",
            "example": "https://example.com"
          }
        },
        "required": [
          "fullName",
          "phoneNumber",
          "paymentMethod",
          "currency",
          "amount"
        ]
      },
      "DepositCheckoutResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          },
          "referenceId": {
            "type": "string",
            "description": "reference id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          },
          "referenceNumber": {
            "type": "number",
            "description": "reference number",
            "example": 1234567890
          },
          "message": {
            "type": "string",
            "description": "message",
            "example": "Deposit request sent successfully"
          },
          "redirectUrl": {
            "type": "string",
            "description": "redirect url",
            "example": ""
          },
          "customerKey": {
            "type": "string",
            "description": "customer key",
            "example": ""
          }
        },
        "required": ["id", "referenceId", "referenceNumber", "message"]
      },
      "CARD_TYPE": {
        "type": "string",
        "enum": ["VISA", "MASTER"],
        "description": "Payment Method"
      },
      "CardDetailsDto": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "Card Number",
            "example": "4591005500136100"
          },
          "holder": {
            "type": "string",
            "description": "Card Holder",
            "example": "John Doe"
          },
          "expiryMonth": {
            "type": "string",
            "description": "Expiry Month",
            "example": "01"
          },
          "expiryYear": {
            "type": "string",
            "description": "Expiry Year",
            "example": "2025"
          },
          "cvv": { "type": "string", "description": "CVV", "example": "123" },
          "paymentBrand": {
            "description": "Payment Method",
            "example": "VISA",
            "allOf": [{ "$ref": "#/components/schemas/CARD_TYPE" }]
          },
          "customerRedirectUrl": {
            "type": "string",
            "description": "customer redirect url",
            "example": "https://example.com"
          }
        },
        "required": [
          "number",
          "holder",
          "expiryMonth",
          "expiryYear",
          "cvv",
          "paymentBrand"
        ]
      },
      "CardDepositDto": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "description": "full name",
            "example": "John Doe"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Customer Phone Number",
            "example": "+245XXXXXXXXX"
          },
          "currency": {
            "description": "ZAR is currently supported",
            "example": "eg ZAR",
            "allOf": [{ "$ref": "#/components/schemas/Currency" }]
          },
          "card": {
            "description": "Card Details",
            "allOf": [{ "$ref": "#/components/schemas/CardDetailsDto" }]
          },
          "country": {
            "description": "Country where the wallet is used (optional if derivable from currency)",
            "example": "ZA",
            "allOf": [{ "$ref": "#/components/schemas/COUNTRY" }]
          },
          "referenceId": {
            "type": "string",
            "description": "reference id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          },
          "amount": {
            "type": "number",
            "description": "amount to deposit",
            "example": 10
          },
          "callbackUrl": {
            "type": "string",
            "description": "callback url",
            "example": "https://example.com"
          },
          "customerRedirectUrl": {
            "type": "string",
            "description": "customer redirect url",
            "example": "https://example.com"
          }
        },
        "required": ["fullName", "phoneNumber", "currency", "card", "amount"]
      },
      "DepositCheckoutStatusResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "status",
            "example": "PENDING"
          },
          "id": {
            "type": "string",
            "description": "id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          },
          "amount": {
            "type": "number",
            "description": "amount",
            "example": 10
          },
          "walletId": {
            "type": "string",
            "description": "wallet id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          },
          "callbackUrl": {
            "type": "string",
            "description": "callback url",
            "example": "https://example.com"
          },
          "referenceId": {
            "type": "string",
            "description": "reference id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          },
          "referenceNumber": {
            "type": "number",
            "description": "reference number",
            "example": 1234567890
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "created at",
            "example": "2025-10-17T14:25:17.498Z"
          },
          "transactionCost": {
            "type": "number",
            "description": "transaction cost",
            "example": 10
          },
          "transactionAmount": {
            "type": "number",
            "description": "transaction amount",
            "example": 10
          },
          "customerKey": {
            "type": "string",
            "description": "customer key",
            "example": ""
          },
          "initialDepositBalance": {
            "type": "number",
            "description": "initial deposit balance",
            "example": 10
          },
          "finalDepositBalance": {
            "type": "number",
            "description": "final deposit balance",
            "example": 10
          }
        },
        "required": [
          "status",
          "id",
          "amount",
          "walletId",
          "referenceId",
          "referenceNumber",
          "createdAt",
          "transactionCost",
          "transactionAmount"
        ]
      },
      "MobileMoneyCustomerDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "phone_number": { "type": "string" },
          "country_code": {
            "type": "string",
            "enum": [
              "GHA",
              "NG",
              "KE",
              "ZA",
              "CIV",
              "ZM",
              "CMR",
              "COD",
              "SEN",
              "TZ",
              "MWI",
              "UG",
              "EG",
              "RW",
              "COD",
              "USA"
            ],
            "example": "GHA or KE"
          },
          "network": {
            "type": "string",
            "enum": [
              "MTN",
              "AIRTEL",
              "VODAFONE",
              "TIGO",
              "ORANGE",
              "NOT_SUPPORTED",
              "ZAMTEL",
              "MPESA",
              "CHECKOUT",
              "BKTRX",
              "CRDTRX",
              "MOOV",
              "TMONEY",
              "FREE",
              "EXPRESSO",
              "HALOPESA",
              "VODACOM"
            ],
            "example": "MPESA or MTN or AIRTEL or VODAFONE"
          },
          "customer_key": { "type": "string" },
          "account_name": { "type": "string" },
          "integrator": { "type": "string" },
          "first_name": { "type": "string", "example": "John" },
          "last_name": { "type": "string", "example": "Doe" },
          "date_of_birth": { "type": "string", "example": "1990-01-01" },
          "id_number": { "type": "string", "example": "123456789" },
          "id_type": { "type": "string", "enum": ["NATIONAL_ID", "ECOWAS_ID"] },
          "image": { "type": "string" },
          "email": { "type": "string", "example": "john.doe@example.com" }
        },
        "required": ["phone_number", "country_code"]
      },
      "CreateMobileMoneyCustomerDto": {
        "type": "object",
        "properties": {
          "phone_number": { "type": "string" },
          "country_code": {
            "type": "string",
            "enum": [
              "GHA",
              "NG",
              "KE",
              "ZA",
              "CIV",
              "ZM",
              "CMR",
              "COD",
              "SEN",
              "TZ",
              "MWI",
              "UG",
              "EG",
              "RW",
              "COD",
              "USA"
            ],
            "example": "GHA or KE"
          },
          "network": {
            "type": "string",
            "enum": [
              "MTN",
              "AIRTEL",
              "VODAFONE",
              "TIGO",
              "ORANGE",
              "NOT_SUPPORTED",
              "ZAMTEL",
              "MPESA",
              "CHECKOUT",
              "BKTRX",
              "CRDTRX",
              "MOOV",
              "TMONEY",
              "FREE",
              "EXPRESSO",
              "HALOPESA",
              "VODACOM"
            ],
            "example": "MPESA or MTN or AIRTEL or VODAFONE"
          },
          "account_name": { "type": "string" },
          "first_name": { "type": "string", "example": "John" },
          "last_name": { "type": "string", "example": "Doe" },
          "date_of_birth": { "type": "string", "example": "1990-01-01" },
          "id_number": { "type": "string", "example": "123456789" },
          "id_type": { "type": "string", "enum": ["NATIONAL_ID", "ECOWAS_ID"] },
          "image": { "type": "string" },
          "email": { "type": "string", "example": "john.doe@example.com" }
        },
        "required": ["phone_number", "country_code"]
      },
      "UpdateMobileMoneyCustomerDto": {
        "type": "object",
        "properties": {
          "phone_number": { "type": "string" },
          "country_code": {
            "type": "string",
            "enum": [
              "GHA",
              "NG",
              "KE",
              "ZA",
              "CIV",
              "ZM",
              "CMR",
              "COD",
              "SEN",
              "TZ",
              "MWI",
              "UG",
              "EG",
              "RW",
              "COD",
              "USA"
            ],
            "example": "GHA or KE"
          },
          "network": {
            "type": "string",
            "enum": [
              "MTN",
              "AIRTEL",
              "VODAFONE",
              "TIGO",
              "ORANGE",
              "NOT_SUPPORTED",
              "ZAMTEL",
              "MPESA",
              "CHECKOUT",
              "BKTRX",
              "CRDTRX",
              "MOOV",
              "TMONEY",
              "FREE",
              "EXPRESSO",
              "HALOPESA",
              "VODACOM"
            ],
            "example": "MPESA or MTN or AIRTEL or VODAFONE"
          },
          "account_name": { "type": "string" },
          "first_name": { "type": "string", "example": "John" },
          "last_name": { "type": "string", "example": "Doe" },
          "date_of_birth": { "type": "string", "example": "1990-01-01" },
          "id_number": { "type": "string", "example": "123456789" },
          "id_type": { "type": "string", "enum": ["NATIONAL_ID", "ECOWAS_ID"] },
          "image": { "type": "string" },
          "email": { "type": "string", "example": "john.doe@example.com" }
        },
        "required": ["phone_number", "country_code"]
      },
      "ValidateAccountResponseDto": {
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean",
            "description": "Whether the phone number or account is valid",
            "example": true
          },
          "isSupported": {
            "type": "boolean",
            "description": "Whether the country/service is supported",
            "example": true
          },
          "requiresInternationalization": {
            "type": "boolean",
            "description": "Whether the phone number needs internationalization (missing country code)",
            "example": false
          },
          "countryCode": {
            "type": "string",
            "description": "Country code (ISO2)",
            "example": "KE"
          },
          "countryName": {
            "type": "string",
            "description": "Country name",
            "example": "Kenya"
          },
          "callingCode": {
            "type": "string",
            "description": "Phone number calling code (e.g., +254)"
          },
          "internationalNumber": {
            "type": "string",
            "description": "Phone number in international format without spaces (e.g., +254719399210)",
            "example": "+254719399210"
          },
          "nationalNumber": {
            "type": "string",
            "description": "Phone number in national format without spaces (e.g., 0719399210)",
            "example": "0719399210"
          },
          "accountType": {
            "type": "string",
            "description": "Account type",
            "enum": ["mobile_money", "bank"]
          },
          "bankName": {
            "type": "string",
            "description": "Bank name (for bank accounts)"
          },
          "currency": {
            "type": "string",
            "description": "Currency for the country",
            "example": "KES"
          },
          "message": {
            "type": "string",
            "description": "Validation error message (if invalid)"
          }
        },
        "required": ["isValid", "isSupported", "accountType"]
      },
      "ValidateMobileMoneyAccountDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "Phone number to validate (with or without country code). Examples: 0719399210, +254719399210, +27123456789",
            "example": "+254719399210"
          }
        },
        "required": ["phoneNumber"]
      },
      "ValidateBankAccountDto": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "Bank account number",
            "example": "1234567890"
          },
          "bankCode": {
            "type": "string",
            "description": "Bank code or name",
            "example": "KCB"
          },
          "countryCode": {
            "type": "string",
            "enum": [
              "GHA",
              "NG",
              "KE",
              "ZA",
              "CIV",
              "ZM",
              "CMR",
              "COD",
              "SEN",
              "TZ",
              "MWI",
              "UG",
              "EG",
              "RW",
              "COD",
              "USA"
            ],
            "description": "Country code",
            "example": "KE"
          }
        },
        "required": ["accountNumber", "bankCode", "countryCode"]
      },
      "WithdrawResponseDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "message": { "type": "string" },
          "referenceId": { "type": "string" },
          "referenceNumber": { "type": "number" }
        },
        "required": ["id", "message", "referenceId", "referenceNumber"]
      },
      "CreateWithdrawalDto": {
        "type": "object",
        "properties": {
          "customer_key": {
            "type": "string",
            "example": "customer-key-123",
            "description": "Customer key"
          },
          "amount": {
            "type": "number",
            "description": "amount to withdraw",
            "example": 10
          },
          "walletId": {
            "type": "string",
            "description": "wallet id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          },
          "callbackUrl": {
            "type": "string",
            "description": "callback url",
            "example": "https://example.com"
          },
          "referenceId": {
            "type": "string",
            "description": "reference id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          }
        },
        "required": ["customer_key", "amount", "walletId"]
      },
      "WithdrawStatus": {
        "type": "string",
        "enum": [
          "RETRY",
          "PENDING",
          "SUCCESSFUL",
          "FAILED",
          "CANCELLED",
          "REVERSED",
          "IN_PROGRESS",
          "INITIATED",
          "ERROR_OCCURRED",
          "DECLINED",
          "EXPIRED",
          "REQUIRE_REVIEW",
          "NOT_INITIATED",
          "TRANSACTION_INITIATED",
          "TRANSACTION_RETRY",
          "TRANSACTION_RETRY_SUCCESSFUL",
          "TRANSACTION_RETRY_FAILED"
        ]
      },
      "INTEGRATOR_FEE_TYPE": {
        "type": "string",
        "enum": ["PERCENTAGE", "FLAT", "NONE"]
      },
      "WithdrawStatusResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "withdrawal id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          },
          "amount": {
            "type": "number",
            "description": "amount to withdraw",
            "example": 10
          },
          "walletId": {
            "type": "string",
            "description": "wallet id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          },
          "callbackUrl": {
            "type": "string",
            "description": "callback url",
            "example": "https://example.com"
          },
          "referenceId": {
            "type": "string",
            "description": "reference id",
            "example": "5f9b2c7b9c9d6b0017b4e6b1"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/WithdrawStatus" }]
          },
          "referenceNumber": { "type": "number" },
          "created_at": { "format": "date-time", "type": "string" },
          "transactionCost": { "type": "number" },
          "transactionAmount": { "type": "number" },
          "customerKey": { "type": "string" },
          "confirmationId": { "type": "string" },
          "integratorFeeAmount": { "type": "number" },
          "integratorFee": { "type": "number" },
          "integratorCommissionType": {
            "allOf": [{ "$ref": "#/components/schemas/INTEGRATOR_FEE_TYPE" }]
          },
          "errorMessage": { "type": "string" }
        },
        "required": [
          "id",
          "amount",
          "walletId",
          "status",
          "referenceNumber",
          "created_at",
          "transactionCost",
          "transactionAmount",
          "customerKey",
          "integratorFeeAmount",
          "integratorFee",
          "integratorCommissionType",
          "errorMessage"
        ]
      },
      "CURRENCY": {
        "type": "string",
        "enum": [
          "KES",
          "GHS",
          "TZS",
          "UGX",
          "ZMW",
          "XAF",
          "CDF",
          "RWF",
          "ETB",
          "ZAR"
        ],
        "description": "Currency"
      },
      "PAYMENT_METHOD": {
        "type": "string",
        "enum": ["mobile_money", "bank", "card", "crypto"],
        "description": "Payment method"
      },
      "PaymentProviderDto": {
        "type": "object",
        "properties": {
          "currency": {
            "description": "Currency",
            "example": "NGN",
            "allOf": [{ "$ref": "#/components/schemas/CURRENCY" }]
          },
          "paymentMethod": {
            "description": "Payment method",
            "example": "BANK_TRANSFER",
            "allOf": [{ "$ref": "#/components/schemas/PAYMENT_METHOD" }]
          }
        },
        "required": ["currency", "paymentMethod"]
      },
      "BankDetailsDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Customer Full Name",
            "example": "George Smith"
          },
          "address": {
            "type": "string",
            "description": "Customer Address",
            "example": "Unit 163 Richmond Street, 25 Allan Road, Oakdene, 4250"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Customer Phone Number, Phone number must be in international format",
            "example": "712345678"
          },
          "bankCode": {
            "type": "number",
            "description": "The code of the bank gotten from the bank list api",
            "example": "2500"
          },
          "accountNumber": {
            "type": "string",
            "description": "The account number of the bank",
            "example": "63122514698"
          },
          "country": {
            "type": "string",
            "description": "The country of the bank",
            "example": "South Africa"
          }
        },
        "required": [
          "name",
          "address",
          "phoneNumber",
          "bankCode",
          "accountNumber",
          "country"
        ]
      },
      "WithdrawTransactionDto": {
        "type": "object",
        "properties": {
          "bankDetails": { "$ref": "#/components/schemas/BankDetailsDto" },
          "currency": {
            "description": "The currency of the transaction",
            "example": "ZAR",
            "allOf": [{ "$ref": "#/components/schemas/Currency" }]
          },
          "amount": {
            "type": "number",
            "description": "The amount of the transaction",
            "example": 100
          },
          "referenceId": {
            "type": "string",
            "description": "The reference id of the transaction",
            "example": "1234567890"
          }
        },
        "required": ["bankDetails", "currency", "amount", "referenceId"]
      },
      "KycResponseDto": {
        "type": "object",
        "properties": {
          "status": { "type": "string" },
          "kycId": { "type": "string" },
          "kycStatus": { "type": "boolean" }
        },
        "required": ["status"]
      },
      "KycBasicDetailsDto": {
        "type": "object",
        "properties": {
          "userEmail": { "type": "string" },
          "customerKey": { "type": "string" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "dob": {
            "type": "string",
            "description": "should be of this format YYYY-MM-DD"
          },
          "gender": { "type": "string", "enum": ["M", "F"] },
          "country": { "type": "string", "description": "example GH,KE,NG" },
          "phone": { "type": "string" }
        },
        "required": [
          "userEmail",
          "customerKey",
          "firstName",
          "lastName",
          "dob",
          "gender",
          "country",
          "phone"
        ]
      },
      "KycAddressDto": {
        "type": "object",
        "properties": {
          "kycId": { "type": "string" },
          "street": { "type": "string" },
          "town": { "type": "string" },
          "country": { "type": "string", "description": "example GH,KE,NG" }
        },
        "required": ["kycId", "street", "town", "country"]
      },
      "KycDocumentDto": {
        "type": "object",
        "properties": {
          "kycId": { "type": "string" },
          "nationality": {
            "type": "string",
            "description": "example Ghanian, Nigerian"
          },
          "documentNo": { "type": "string" },
          "documentExpirationDate": {
            "type": "string",
            "description": "should be of this format YYYY-MM-DD"
          },
          "country": {
            "type": "string",
            "description": "example Ghana, Nigeria, Kenya"
          },
          "documentName": {
            "type": "string",
            "description": "example PASSPORT, GOVERNMENT ID, VOTERS ID"
          }
        },
        "required": [
          "kycId",
          "nationality",
          "documentNo",
          "documentExpirationDate",
          "country",
          "documentName"
        ]
      },
      "IntegratorKycUsersResponseDto": {
        "type": "object",
        "properties": {
          "kycId": { "type": "string" },
          "kycVerified": { "type": "boolean" },
          "basicDetails": { "$ref": "#/components/schemas/KycBasicDetailsDto" },
          "address": { "$ref": "#/components/schemas/KycAddressDto" },
          "document": { "$ref": "#/components/schemas/KycDocumentDto" }
        },
        "required": [
          "kycId",
          "kycVerified",
          "basicDetails",
          "address",
          "document"
        ]
      },
      "CountrySupportResponseDto": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string",
            "description": "Country code",
            "example": "KE"
          },
          "isoName": {
            "type": "string",
            "description": "ISO country name",
            "example": "KEN"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "KES"
          },
          "serviceType": {
            "type": "string",
            "description": "Service type",
            "example": "WITHDRAW"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is the country active for this service",
            "example": true
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Is this service enabled for the authenticated integrator",
            "example": true
          },
          "requiresNetwork": {
            "type": "boolean",
            "description": "Requires network selection for mobile money",
            "example": false
          },
          "requiresAccountName": {
            "type": "boolean",
            "description": "Requires account name for mobile money",
            "example": false
          },
          "availableNetworks": {
            "description": "Available networks for this country",
            "example": ["MPESA", "AIRTEL"],
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": [
          "countryCode",
          "isoName",
          "currency",
          "serviceType",
          "isActive",
          "isEnabled",
          "requiresNetwork",
          "requiresAccountName"
        ]
      },
      "NetworkAvailabilityResponseDto": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string",
            "description": "Country code",
            "example": "KE"
          },
          "networks": {
            "description": "Available networks",
            "example": ["MPESA", "AIRTEL"],
            "type": "array",
            "items": { "type": "string" }
          },
          "isRequired": {
            "type": "boolean",
            "description": "Whether network selection is required",
            "example": false
          }
        },
        "required": ["countryCode", "networks", "isRequired"]
      },
      "BankResponseDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "description": "Bank code",
            "example": 68
          },
          "name": {
            "type": "string",
            "description": "Bank name",
            "example": "Equity Bank"
          },
          "currency": {
            "type": "string",
            "description": "Currency this bank operates in",
            "example": "KES"
          },
          "bankGroupId": {
            "type": "string",
            "description": "Bank group ID (if applicable)"
          },
          "universalBranchCode": {
            "type": "string",
            "description": "Universal branch code (if applicable)"
          }
        },
        "required": ["code", "name", "currency"]
      },
      "ServiceConfigurationResponseDto": {
        "type": "object",
        "properties": {
          "serviceType": {
            "type": "string",
            "description": "Service type",
            "example": "WITHDRAW"
          },
          "countries": {
            "description": "List of active countries for this service",
            "type": "array",
            "items": { "type": "string" }
          },
          "totalCountries": {
            "type": "number",
            "description": "Total count of active countries",
            "example": 8
          }
        },
        "required": ["serviceType", "countries", "totalCountries"]
      },
      "OfframpResponseDto": {
        "type": "object",
        "properties": {
          "referenceId": { "type": "string", "description": "Reference ID" },
          "fiatAmount": { "type": "number", "description": "Fiat amount" },
          "fiatTransactionAmount": {
            "type": "number",
            "description": "Fiat transaction amount"
          },
          "cryptoAmount": { "type": "number", "description": "Crypto amount" },
          "fiatCurrency": {
            "description": "Fiat currency",
            "allOf": [{ "$ref": "#/components/schemas/CURRENCY" }]
          },
          "customerKey": { "type": "string", "description": "Customer key" },
          "fiatWalletId": { "type": "string", "description": "Fiat wallet ID" },
          "senderAddress": {
            "type": "string",
            "description": "Sender address"
          },
          "transactionHash": {
            "type": "string",
            "description": "Transaction hash"
          },
          "transactionHashAmount": {
            "type": "number",
            "description": "Transaction hash amount"
          },
          "status": { "type": "string", "description": "Status" },
          "onchainStatus": {
            "type": "string",
            "description": "Onchain status"
          },
          "rate": { "type": "object", "description": "Rate" },
          "escrowAddress": {
            "type": "string",
            "description": "Escrow address"
          },
          "usingIntegratedWallet": {
            "type": "boolean",
            "description": "Whether using integrated crypto wallet flow"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          }
        },
        "required": [
          "referenceId",
          "fiatAmount",
          "fiatTransactionAmount",
          "cryptoAmount",
          "fiatCurrency",
          "customerKey",
          "fiatWalletId",
          "senderAddress",
          "transactionHash",
          "transactionHashAmount",
          "status",
          "onchainStatus",
          "rate",
          "escrowAddress"
        ]
      },
      "MobileMoneyReceiverDto": {
        "type": "object",
        "properties": {
          "phoneNumber": { "type": "string", "description": "Phone number" },
          "accountName": { "type": "string", "description": "Account name" },
          "networkProvider": {
            "type": "string",
            "description": "Provider network (Check Payment Providers API for available networks)",
            "example": "MTN, VODAFONE, AIRTEL, MPESA"
          }
        },
        "required": ["phoneNumber", "accountName", "networkProvider"]
      },
      "BankDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "Full name" },
          "address": { "type": "string", "description": "Address" },
          "phoneNumber": { "type": "string", "description": "Phone number" },
          "bankCode": { "type": "number", "description": "Bank code" },
          "accountNumber": {
            "type": "string",
            "description": "Account number"
          },
          "country": { "type": "string", "description": "Country" }
        },
        "required": [
          "name",
          "address",
          "phoneNumber",
          "bankCode",
          "accountNumber",
          "country"
        ]
      },
      "OfframpDto": {
        "type": "object",
        "properties": {
          "mobileMoneyReceiver": {
            "description": "Mobile Money receiver details",
            "allOf": [{ "$ref": "#/components/schemas/MobileMoneyReceiverDto" }]
          },
          "bankReceiver": {
            "description": "Bank receiver details",
            "allOf": [{ "$ref": "#/components/schemas/BankDto" }]
          },
          "cryptoAmount": {
            "type": "number",
            "description": "The crypto amount"
          },
          "currency": {
            "description": "Fiat currency",
            "allOf": [{ "$ref": "#/components/schemas/CURRENCY" }]
          },
          "chain": {
            "description": "Chain",
            "allOf": [{ "$ref": "#/components/schemas/Chain" }]
          },
          "token": {
            "description": "Stable Coin or Token",
            "allOf": [{ "$ref": "#/components/schemas/StableCoin" }]
          },
          "referenceId": { "type": "string", "description": "Reference ID" },
          "senderAddress": {
            "type": "string",
            "description": "Sender address (optional - if not provided, will use integrator crypto wallet)"
          },
          "callbackUrl": { "type": "string", "description": "Callback Url" },
          "rateId": { "type": "string", "description": "Rate ID" },
          "refundInitiated": {
            "type": "boolean",
            "description": "Whether refund has been initiated"
          },
          "refundStatus": { "type": "string", "description": "Refund status" },
          "refundTransactionHash": {
            "type": "string",
            "description": "Refund transaction hash"
          },
          "refundAmount": { "type": "number", "description": "Refund amount" }
        },
        "required": [
          "cryptoAmount",
          "currency",
          "chain",
          "token",
          "referenceId"
        ]
      },
      "OnrampCryptoResponseDto": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "description": "The reference ID of the onramp crypto transaction"
          },
          "status": {
            "type": "string",
            "description": "The status of the onramp crypto transaction"
          },
          "cryptoAmount": {
            "type": "number",
            "description": "The amount of crypto sent"
          },
          "cryptoAmountReceived": {
            "type": "number",
            "description": "The amount of crypto received"
          },
          "feeInCrypto": {
            "type": "number",
            "description": "The fee in crypto"
          },
          "feeType": { "type": "string", "description": "The type of fee" },
          "cryptoWallet": {
            "type": "string",
            "description": "The ID of the crypto wallet"
          },
          "chain": {
            "type": "object",
            "description": "The chain of the onramp crypto transaction"
          },
          "token": {
            "type": "object",
            "description": "The token of the onramp crypto transaction"
          },
          "transactionHash": {
            "type": "string",
            "description": "The transaction hash of the onramp crypto transaction"
          }
        },
        "required": [
          "referenceId",
          "status",
          "cryptoAmount",
          "cryptoAmountReceived",
          "feeInCrypto",
          "feeType",
          "cryptoWallet",
          "chain",
          "token",
          "transactionHash"
        ]
      },
      "CreateOnrampCryptoDto": {
        "type": "object",
        "properties": {
          "receiverAddress": {
            "type": "string",
            "description": "The receiver address of the onramp crypto transaction"
          },
          "chain": {
            "description": "The chain of the onramp crypto transaction",
            "allOf": [{ "$ref": "#/components/schemas/Chain" }]
          },
          "token": {
            "description": "The token of the onramp crypto transaction",
            "allOf": [{ "$ref": "#/components/schemas/StableCoin" }]
          },
          "cryptoAmount": {
            "type": "number",
            "description": "The amount of crypto sent"
          },
          "referenceId": {
            "type": "string",
            "description": "The reference ID of the onramp crypto transaction"
          }
        },
        "required": [
          "receiverAddress",
          "chain",
          "token",
          "cryptoAmount",
          "referenceId"
        ]
      },
      "OnrampRequestResponseDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Onramp ID" },
          "referenceId": {
            "type": "string",
            "description": "Onramp reference ID"
          },
          "referenceNumber": {
            "type": "number",
            "description": "Onramp reference number"
          },
          "message": { "type": "string", "description": "Onramp message" },
          "customerKey": {
            "type": "string",
            "description": "Onramp customer key"
          },
          "redirectUrl": {
            "type": "string",
            "description": "Onramp redirect URL"
          }
        },
        "required": [
          "id",
          "referenceId",
          "referenceNumber",
          "message",
          "customerKey"
        ]
      },
      "MobileMoneyDto": {
        "type": "object",
        "properties": {
          "phoneNumber": { "type": "string", "description": "Phone number" },
          "accountName": { "type": "string", "description": "Account name" },
          "providerNetwork": {
            "type": "string",
            "description": "Provider network (Check Payment Providers API for available networks)",
            "example": "MTN, VODAFONE, AIRTEL, MPESA"
          }
        },
        "required": ["phoneNumber", "accountName", "providerNetwork"]
      },
      "BankCheckoutDto": {
        "type": "object",
        "properties": {
          "fullName": { "type": "string", "description": "Full name" },
          "phoneNumber": { "type": "string", "description": "Phone number" },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method should be CARD OR PAYBYBANK"
          }
        },
        "required": ["fullName", "phoneNumber"]
      },
      "OnrampDto": {
        "type": "object",
        "properties": {
          "mobileMoney": {
            "description": "Mobile Money details",
            "allOf": [{ "$ref": "#/components/schemas/MobileMoneyDto" }]
          },
          "bankCheckout": {
            "description": "Bank Checkout details",
            "allOf": [{ "$ref": "#/components/schemas/BankCheckoutDto" }]
          },
          "fiatAmount": { "type": "number", "description": "Fiat amount" },
          "currency": {
            "description": "The currency of the wallet",
            "example": "eg NGN or GHS or KES",
            "allOf": [{ "$ref": "#/components/schemas/Currency" }]
          },
          "chain": {
            "description": "Chain",
            "allOf": [{ "$ref": "#/components/schemas/Chain" }]
          },
          "token": {
            "description": "Stable Coin",
            "allOf": [{ "$ref": "#/components/schemas/StableCoin" }]
          },
          "receiverAddress": {
            "type": "string",
            "description": "Receiver address"
          },
          "referenceId": { "type": "string", "description": "Reference ID" },
          "callbackUrl": { "type": "string", "description": "Reference ID" },
          "rateId": { "type": "string", "description": "Rate ID" },
          "fiatWalletId": {
            "type": "string",
            "description": "Specific fiat wallet ID to use for fiat-to-crypto conversion. If not provided, a wallet will be selected automatically based on currency."
          }
        },
        "required": [
          "fiatAmount",
          "currency",
          "chain",
          "token",
          "receiverAddress",
          "referenceId",
          "callbackUrl"
        ]
      },
      "OnrampErrorDto": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "description": "Error message" },
          "code": { "type": "string", "description": "Error code" },
          "details": {
            "type": "object",
            "description": "Additional error details"
          }
        },
        "required": ["message"]
      },
      "OnrampResponseDto": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "description": "Onramp reference ID"
          },
          "depositStatus": {
            "description": "Deposit status",
            "allOf": [{ "$ref": "#/components/schemas/DEPOSIT_STATUS" }]
          },
          "onchainStatus": {
            "description": "Onchain status",
            "allOf": [{ "$ref": "#/components/schemas/DEPOSIT_STATUS" }]
          },
          "transactionHash": {
            "type": "string",
            "description": "Transaction hash"
          },
          "rate": { "type": "object", "description": "Rate" },
          "fiatAmount": { "type": "number", "description": "Fiat amount" },
          "cryptoAmount": { "type": "number", "description": "Crypto amount" },
          "error": {
            "description": "Error details if the transaction failed",
            "nullable": true,
            "allOf": [{ "$ref": "#/components/schemas/OnrampErrorDto" }]
          }
        },
        "required": [
          "referenceId",
          "depositStatus",
          "onchainStatus",
          "rate",
          "fiatAmount",
          "cryptoAmount"
        ]
      },
      "BulkPaymentProgressDto": {
        "type": "object",
        "properties": {
          "step": { "type": "string", "description": "Step name" },
          "status": { "type": "string", "description": "Step status" },
          "message": { "type": "string", "description": "Progress message" },
          "startedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When step started"
          },
          "completedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When step completed"
          },
          "details": {
            "type": "object",
            "description": "Additional step details"
          }
        },
        "required": [
          "step",
          "status",
          "message",
          "startedAt",
          "completedAt",
          "details"
        ]
      },
      "BulkPaymentBatchResponseDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Batch ID" },
          "batchName": { "type": "string", "description": "Batch name" },
          "status": { "type": "string", "description": "Batch status" },
          "totalAmount": { "type": "number", "description": "Total amount" },
          "totalPayments": {
            "type": "number",
            "description": "Total payments count"
          },
          "successfulPayments": {
            "type": "number",
            "description": "Successful payments count"
          },
          "failedPayments": {
            "type": "number",
            "description": "Failed payments count"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created date"
          },
          "progress": {
            "description": "Progress tracking",
            "type": "array",
            "items": { "$ref": "#/components/schemas/BulkPaymentProgressDto" }
          }
        },
        "required": [
          "id",
          "batchName",
          "status",
          "totalAmount",
          "totalPayments",
          "successfulPayments",
          "failedPayments",
          "createdAt",
          "progress"
        ]
      },
      "BulkPaymentTransactionResponseDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Transaction ID" },
          "transactionName": {
            "type": "string",
            "description": "Transaction name"
          },
          "description": {
            "type": "string",
            "description": "Transaction description"
          },
          "status": { "type": "string", "description": "Transaction status" },
          "fileName": { "type": "string", "description": "File name" },
          "totalBatches": { "type": "number", "description": "Total batches" },
          "totalRecipients": {
            "type": "number",
            "description": "Total recipients"
          },
          "totalAmount": { "type": "number", "description": "Total amount" },
          "currencies": {
            "description": "Currencies involved",
            "type": "array",
            "items": { "type": "string" }
          },
          "completedBatches": {
            "type": "number",
            "description": "Completed batches count"
          },
          "failedBatches": {
            "type": "number",
            "description": "Failed batches count"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created date"
          },
          "createdBy": { "type": "string", "description": "Created by" },
          "batches": {
            "description": "Batches in this transaction",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkPaymentBatchResponseDto"
            }
          }
        },
        "required": [
          "id",
          "transactionName",
          "description",
          "status",
          "fileName",
          "totalBatches",
          "totalRecipients",
          "totalAmount",
          "currencies",
          "completedBatches",
          "failedBatches",
          "createdAt",
          "createdBy"
        ]
      },
      "AvailableWalletDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Wallet ID" },
          "name": { "type": "string", "description": "Wallet name" },
          "currency": {
            "type": "string",
            "description": "Wallet currency",
            "enum": [
              "KES",
              "GHS",
              "NGN",
              "ZAR",
              "ZAR",
              "USD",
              "XOF",
              "ZMW",
              "XAF",
              "SLE",
              "CDF",
              "TZS",
              "UGX",
              "EGP",
              "MWK",
              "RWF",
              "ETB",
              "MZN",
              "LSL",
              "GNF"
            ]
          },
          "balance": { "type": "number", "description": "Available balance" }
        },
        "required": ["id", "name", "currency", "balance"]
      },
      "CSVValidationResponseDto": {
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean",
            "description": "Whether CSV is valid"
          },
          "totalRecords": {
            "type": "number",
            "description": "Total records in CSV"
          },
          "currencies": {
            "description": "Currencies found in CSV",
            "type": "array",
            "items": { "type": "string" }
          },
          "errors": {
            "description": "Validation errors if any",
            "type": "array",
            "items": { "type": "string" }
          },
          "warnings": {
            "description": "Validation warnings if any",
            "type": "array",
            "items": { "type": "string" }
          },
          "currencyBreakdown": {
            "type": "object",
            "description": "Currency breakdown"
          },
          "fileHash": {
            "type": "string",
            "description": "File hash for duplicate detection"
          },
          "isDuplicate": {
            "type": "boolean",
            "description": "Whether file is duplicate"
          }
        },
        "required": [
          "isValid",
          "totalRecords",
          "currencies",
          "errors",
          "warnings",
          "currencyBreakdown",
          "fileHash",
          "isDuplicate"
        ]
      },
      "BulkPaymentRecipientDto": {
        "type": "object",
        "properties": {
          "recipientName": {
            "type": "string",
            "description": "Recipient full name"
          },
          "recipientEmail": {
            "type": "string",
            "description": "Recipient email address"
          },
          "recipientPhone": {
            "type": "string",
            "description": "Recipient phone number"
          },
          "amount": { "type": "number", "description": "Payment amount" },
          "currency": {
            "type": "string",
            "description": "Payment currency",
            "enum": [
              "KES",
              "GHS",
              "NGN",
              "ZAR",
              "ZAR",
              "USD",
              "XOF",
              "ZMW",
              "XAF",
              "SLE",
              "CDF",
              "TZS",
              "UGX",
              "EGP",
              "MWK",
              "RWF",
              "ETB",
              "MZN",
              "LSL",
              "GNF"
            ]
          },
          "reference": {
            "type": "string",
            "description": "Unique payment reference"
          }
        },
        "required": [
          "recipientName",
          "recipientEmail",
          "recipientPhone",
          "amount",
          "currency",
          "reference"
        ]
      },
      "CurrencyWalletSelectionDto": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency code",
            "enum": [
              "KES",
              "GHS",
              "NGN",
              "ZAR",
              "ZAR",
              "USD",
              "XOF",
              "ZMW",
              "XAF",
              "SLE",
              "CDF",
              "TZS",
              "UGX",
              "EGP",
              "MWK",
              "RWF",
              "ETB",
              "MZN",
              "LSL",
              "GNF"
            ]
          },
          "walletId": { "type": "string", "description": "Selected wallet ID" }
        },
        "required": ["currency", "walletId"]
      },
      "CreateBulkPaymentRequestDto": {
        "type": "object",
        "properties": {
          "batchName": { "type": "string", "description": "Batch name" },
          "batchDescription": {
            "type": "string",
            "description": "Batch description"
          },
          "recipients": {
            "description": "Recipients list",
            "type": "array",
            "items": { "$ref": "#/components/schemas/BulkPaymentRecipientDto" }
          },
          "walletSelections": {
            "description": "Currency wallet selections",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyWalletSelectionDto"
            }
          },
          "callbackUrl": {
            "type": "string",
            "description": "Callback URL for notifications"
          },
          "integratorId": {
            "type": "string",
            "description": "For admin use - integrator ID"
          }
        },
        "required": ["batchName", "recipients", "walletSelections"]
      },
      "CurrencyBreakdownDto": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency",
            "enum": [
              "KES",
              "GHS",
              "NGN",
              "ZAR",
              "ZAR",
              "USD",
              "XOF",
              "ZMW",
              "XAF",
              "SLE",
              "CDF",
              "TZS",
              "UGX",
              "EGP",
              "MWK",
              "RWF",
              "ETB",
              "MZN",
              "LSL",
              "GNF"
            ]
          },
          "recipientCount": {
            "type": "number",
            "description": "Number of recipients"
          },
          "totalAmount": {
            "type": "number",
            "description": "Total amount for this currency"
          },
          "walletId": { "type": "string", "description": "Selected wallet ID" },
          "recipients": {
            "description": "Recipients for this currency",
            "type": "array",
            "items": { "$ref": "#/components/schemas/BulkPaymentRecipientDto" }
          }
        },
        "required": [
          "currency",
          "recipientCount",
          "totalAmount",
          "walletId",
          "recipients"
        ]
      },
      "BulkPaymentPreviewDto": {
        "type": "object",
        "properties": {
          "totalBatches": {
            "type": "number",
            "description": "Total batches to be created"
          },
          "totalRecipients": {
            "type": "number",
            "description": "Total recipients across all batches"
          },
          "currencyBreakdown": {
            "description": "Breakdown by currency - never add amounts from different currencies",
            "type": "array",
            "items": { "$ref": "#/components/schemas/CurrencyBreakdownDto" }
          }
        },
        "required": ["totalBatches", "totalRecipients", "currencyBreakdown"]
      },
      "BulkPaymentStatsDto": {
        "type": "object",
        "properties": {
          "totalBatches": { "type": "number", "description": "Total batches" },
          "totalSuccessfulPayments": {
            "type": "number",
            "description": "Total successful payments"
          },
          "totalFailedPayments": {
            "type": "number",
            "description": "Total failed payments"
          },
          "averageBatchSize": {
            "type": "number",
            "description": "Average batch size"
          },
          "successRate": {
            "type": "number",
            "description": "Success rate percentage"
          },
          "currencyBreakdown": {
            "type": "object",
            "description": "Currency breakdown",
            "example": {
              "KES": {
                "totalAmount": 50000,
                "totalBatches": 3,
                "totalPayments": 25
              },
              "ZMW": {
                "totalAmount": 15000,
                "totalBatches": 1,
                "totalPayments": 10
              }
            }
          }
        },
        "required": [
          "totalBatches",
          "totalSuccessfulPayments",
          "totalFailedPayments",
          "averageBatchSize",
          "successRate",
          "currencyBreakdown"
        ]
      },
      "BulkPaymentDetailsResponseDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Payment ID" },
          "recipientName": {
            "type": "string",
            "description": "Recipient name"
          },
          "recipientEmail": {
            "type": "string",
            "description": "Recipient email"
          },
          "recipientPhone": {
            "type": "string",
            "description": "Recipient phone"
          },
          "amount": { "type": "number", "description": "Payment amount" },
          "currency": {
            "type": "string",
            "description": "Currency",
            "enum": [
              "KES",
              "GHS",
              "NGN",
              "ZAR",
              "ZAR",
              "USD",
              "XOF",
              "ZMW",
              "XAF",
              "SLE",
              "CDF",
              "TZS",
              "UGX",
              "EGP",
              "MWK",
              "RWF",
              "ETB",
              "MZN",
              "LSL",
              "GNF"
            ]
          },
          "reference": { "type": "string", "description": "Payment reference" },
          "status": { "type": "string", "description": "Payment status" },
          "customerKey": {
            "type": "string",
            "description": "Customer key if created"
          },
          "withdrawalId": {
            "type": "string",
            "description": "Withdrawal ID if processed"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message if failed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created date"
          }
        },
        "required": [
          "id",
          "recipientName",
          "recipientEmail",
          "recipientPhone",
          "amount",
          "currency",
          "reference",
          "status",
          "createdAt"
        ]
      },
      "FiatToFiatInvoiceResponseDto": {
        "type": "object",
        "properties": {
          "invoiceId": {
            "type": "string",
            "description": "The id of the invoice",
            "example": "1e476673-0931-4eba-8373-37b368ce59f7"
          },
          "referenceId": {
            "type": "string",
            "description": "The reference id of the invoice",
            "example": "1e476673-0931-4eba-8373-37b368ce59f7"
          }
        },
        "required": ["invoiceId", "referenceId"]
      },
      "GenerateInvoiceDto": {
        "type": "object",
        "properties": {
          "currency": {
            "description": "The currency of the invoice",
            "example": "KES",
            "allOf": [{ "$ref": "#/components/schemas/Currency" }]
          },
          "amount": {
            "type": "number",
            "description": "The amount of the invoice",
            "example": 1000
          },
          "bank": {
            "description": "The bank details of the invoice",
            "example": {
              "accountName": "John Doe",
              "address": "123 Main St",
              "phoneNumber": "+254712345678",
              "bankCode": 123456,
              "accountNumber": "1234567890",
              "country": "Kenya"
            },
            "allOf": [{ "$ref": "#/components/schemas/BankDto" }]
          },
          "referenceId": {
            "type": "string",
            "description": "The reference id of the invoice",
            "example": "1e476673-0931-4eba-8373-37b368ce59f7"
          },
          "userReference": {
            "type": "string",
            "description": "The user reference of the invoice",
            "example": "1e476673-0931-4eba-8373-37b368ce59f7"
          }
        },
        "required": ["currency", "amount", "bank", "referenceId"]
      },
      "GetInvoiceResponseDto": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "description": "The reference id of the invoice",
            "example": "1e476673-0931-4eba-8373-37b368ce59f7"
          },
          "amount": {
            "type": "number",
            "description": "Amount to be paid",
            "example": "John Doe"
          },
          "currency": {
            "description": "Currency of the amount",
            "example": "+254712345678",
            "allOf": [{ "$ref": "#/components/schemas/Currency" }]
          },
          "accountName": {
            "type": "string",
            "description": "The account name of the invoice",
            "example": "John Doe"
          },
          "address": {
            "type": "string",
            "description": "The address of the invoice",
            "example": "123 Main St"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number of the invoice",
            "example": "+254712345678"
          },
          "bankCode": {
            "type": "string",
            "description": "The bank code of the invoice",
            "example": "123456"
          },
          "accountNumber": {
            "type": "string",
            "description": "The account number of the invoice",
            "example": "1234567890"
          },
          "country": {
            "type": "string",
            "description": "The country of the invoice",
            "example": "Kenya"
          },
          "invoice": {
            "type": "object",
            "description": "The invoice details",
            "example": {
              "referenceId": "1e476673-0931-4eba-8373-37b368ce59f7",
              "invoiceId": "1e476673-0931-4eba-8373-37b368ce59f7",
              "amount": 1000,
              "currency": "KES"
            }
          }
        },
        "required": [
          "referenceId",
          "amount",
          "currency",
          "accountName",
          "address",
          "phoneNumber",
          "bankCode",
          "accountNumber",
          "country",
          "invoice"
        ]
      },
      "PayInvoiceDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "The amount of the invoice",
            "example": 1000
          },
          "currency": {
            "description": "The currency of the invoice",
            "example": "KES",
            "allOf": [{ "$ref": "#/components/schemas/Currency" }]
          },
          "referenceId": {
            "type": "string",
            "description": "The reference id of the invoice",
            "example": "1e476673-0931-4eba-8373-37b368ce59f7"
          },
          "mobileMoney": {
            "description": "The mobile money details of the invoice",
            "example": {
              "accountName": "John Doe",
              "phoneNumber": "+254712345678",
              "providerNetwork": "MTN"
            },
            "allOf": [{ "$ref": "#/components/schemas/MobileMoneyDto" }]
          }
        },
        "required": ["amount", "currency", "referenceId", "mobileMoney"]
      },
      "PayInvoice": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount of the invoice",
            "example": 1000
          },
          "currency": {
            "description": "The currency of the invoice",
            "example": "KES",
            "allOf": [{ "$ref": "#/components/schemas/Currency" }]
          },
          "status": {
            "type": "string",
            "description": "The status of the invoice",
            "example": "PENDING"
          }
        },
        "required": ["amount", "currency", "status"]
      },
      "PayInvoiceResponseDto": {
        "type": "object",
        "properties": {
          "invoice": {
            "description": "The invoice details",
            "example": {
              "amount": 1000,
              "currency": "KES",
              "status": "PENDING"
            },
            "allOf": [{ "$ref": "#/components/schemas/PayInvoice" }]
          },
          "currency": {
            "description": "The currency of the invoice",
            "example": "KES",
            "allOf": [{ "$ref": "#/components/schemas/Currency" }]
          },
          "amount": {
            "type": "number",
            "description": "The amount of the invoice",
            "example": 1000
          },
          "referenceId": {
            "type": "string",
            "description": "The reference id of the invoice",
            "example": "1e476673-0931-4eba-8373-37b368ce59f7"
          },
          "status": {
            "description": "The status of the invoice",
            "example": "PENDING",
            "allOf": [{ "$ref": "#/components/schemas/WithdrawStatus" }]
          }
        },
        "required": ["invoice", "currency", "amount", "referenceId", "status"]
      }
    }
  }
}